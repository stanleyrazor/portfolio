{"title":"Learning representations in high-dimensional data","markdown":{"yaml":{"title":"Learning representations in high-dimensional data","subtitle":"Regression and Classification","author":"Stanley Sayianka","format":{"html":{"grid":{"margin-width":"400px"}}},"reference-location":"margin","citation-location":"margin","date":"2022-11-12","categories":["stats","machine-learning"],"image":"high-dim.jpg","include-before-body":{"text":"<script defer src=\"https://cloud.umami.is/script.js\" data-website-id=\"e2626c70-2118-4fa1-bf3c-49552f9b4ccf\"></script>\n"}},"headingText":"originally:       margin-width: 350px","containsRefs":false,"markdown":"\n\n```{r, echo=F, warning=F, message=F}\n\nknitr::opts_chunk$set(echo=FALSE)\nknitr::opts_chunk$set(warning=FALSE)\nknitr::opts_chunk$set(message=FALSE)\n\n# sourcing for functions and global data\nsource(\"rfiles/Global-1.R\")\nsource(\"rfiles/Global-2.R\")\n\nlibrary(pacman)\np_load(dplyr, ggplot2, sf, stringr, purrr, gridExtra, gghighlight, ModelMetrics)\n\nscientific_theme <- theme(\n  # Text elements\n  text = element_text(family = \"serif\", color = \"black\"),\n  plot.title = element_text(size = 12, face = \"plain\", hjust = 0.5),\n  axis.title = element_text(size = 12, face = \"plain\"),\n  axis.text = element_text(size = 12),\n  axis.text.x = element_text(angle = 0, hjust = 0.5),\n  axis.text.y = element_text(angle = 0, hjust = 1),\n  legend.title = element_text(size = 12),\n  legend.text = element_text(size = 12),\n  \n  # Plot background and grid\n  panel.background = element_rect(fill = \"white\"),\n  panel.grid = element_blank(),\n  \n  # Axis lines and ticks\n  axis.line = element_line(color = \"black\"),\n  axis.ticks = element_line(color = \"black\"),\n  \n  # Remove the right and top axis lines (bty=\"l\" equivalent)\n  axis.line.y.right = element_blank(),\n  axis.line.x.top = element_blank(),\n  \n  # Legend\n  legend.background = element_rect(fill = \"white\"),\n  legend.key = element_rect(fill = \"white\", color = NA),\n  \n  # Plot margins (approximating mar = c(5, 5, 3, 5))\n  plot.margin = margin(t = 3, r = 5, b = 5, l = 5, unit = \"pt\"),\n  \n  # Expand axes to touch the data (xaxs=\"i\", yaxs=\"i\" equivalent)\n  panel.spacing = unit(0, \"lines\"),\n  plot.title.position = \"plot\"\n)\n```\n\n\n# Introduction\n\nHigh-dimensional data is the type of data^[Also known as wide data] which is characterized by the presence of many variables^[potentially where the number of variables(p) is greater than the number of observations in the sample(n) i.e. $p > n$.]. Due to the growing nature of variables of interest and data collection over the past years in diverse domains such as health-care/medicine, marketing, finance etc., there is an increasing need for techniques which are able to thrive in situations where the number of variables is higher, and at times even more than the number of data points available to train the model.^[For most Machine Learning algorithms, data at hand is usually of the form $n >> p$, i.e. the number of data points(n) used in training the model is far higher than the  number of predictors(p) in the data. However for high dimensional Machine Learning, the number of predictors(p) is usually very large, and at times more than the sample size(n), which poses a problem for most Machine Learning models.]\n\nExamples of problems common in high dimensional learning include the following:\n\nPredicting consumer behavior and patterns in online-shopping stores, where the variables of interest, could be all search terms entered by the consumer, the click history, previous purchases and declines, demographic characteristics, and search account history. In such a problem, while the number of predictors for online behavior are many, we typically only have a few customer information.\n\n\nSignal generation, and price prediction in finance. In this domain, the variables of interest are usually: technical indicators of the price series such as the moving averages, volatility, etc, the fundamental indicators such as market capitalization and several accounting ratios, analyst ratings, social media sentiment etc. In this domain too, the number of historical data points used to train models is often limited^[at least not for high-frequency trading domain], however the number of predictors keeps growing.\n\n\nIn medicine, a problem of interest is to predict whether given tumors are benign or malignant, where variables would include a number of characteristics of cells e.g. perimeter, concavity, area, smoothness etc and other variables about the patient such as patient's demographic characteristics, lifestyle characteristics etc. The characteristics could be so many, yet the number of patients, for which we have data could be few due to patients leaving studies/treatment.\n\n---\n\nThe challenges associated with learning in high dimensions, require specialized techniques suited to such data since common statistical learning methods such as least squares fail in such dimensions. Potential dangers encountered when working with high-dimensional data include:\n\n1. Multi-collinearity: In the presence of a high number of predictors, the possibility of more than one pair of predictors being highly correlated increases, and this poses a challenge termed multi-collinearity in the data.^[Multi-collinearity refers to situations in which there are several predictors which are significantly correlated] Several machine learning models become unstable in the presence of multi-collinearity such as Neural networks, support vector machines etc, while some of them may break down completely such as multiple linear regression. Multi-collinearity introduces redundancy in model fitting, since two or more predictors attempt to explain the same variability in the response.\n\n\n2. False positive discoveries: In high dimension data, the probability of finding one or more predictors which are significantly related to the response due to random chance and not due to a true relationship increases, which leads to the problem of false discoveries. Such false positive findings often decrease a model's performance and hurt model interpretability.\n\n```{r, echo=F}\n#| fig-cap: \"An example of a dataset with two predictors, and two observations. (n = p = 2)\"\n#| column: margin\n#| message: false\n#| fig-height: 5\n#| fig-width: 5\n#| fig-show: \"hold\"\n#| cache: true\n\ndd <- data.frame(x = c(2, 5.5), y = c(4, 11))\nplot(dd$x, dd$y, pch = 20, xlim = c(0, 7), ylim = c(0, 15),\n     main = NULL, xlab = \"Predictor\", ylab = \"Response\")\nabline(lm(y~x, data = dd), col='blue')\n```\n\n```{r, echo=F}\n#| fig-cap: \"An example of a dataset with (n = p = 9) using polynomial regression (degree 9)\"\n#| column: margin\n#| message: false\n#| fig-height: 5\n#| fig-width: 5\n#| fig-show: \"hold\"\n#| cache: true\n\nx <- seq(0,1, length = 10)\nset.seed(226)\ny <- sin(2*pi*x) + rnorm(n = 10, mean = 0, sd = 1)\nplot(x, y, type=\"p\", pch=20, ylim=c(-5, 7),\n     xlab = \"Predictor\", ylab = \"Response\")\npmd = polyreg(x, y, order=9)\nyhat <- plot_poly(pmd, x, c = \"red\")\n```\n\n\n3. Over-fitting: In high dimensional data, where $n = p$ or $n > p$, then over-fitting is likely to occur. In this scenario, the models fitted have n degrees of freedom. This is illustrated in the following example: Suppose we have a sample of 2 data points, and one variable of interest(together with an intercept) i.e. $n = p$, then fitting a linear regression model results in a perfect fit (all residuals become 0), however such a model may fail to generalize to previously unseen data(test data). This shows that in high dimensional learning, it is possible for models to perfectly fit the training data, and perform poorly in previously unseen data. In such cases, the training error is a poor approximation of test error rate. \n\n\n4. Common performance metrics for models also fail in the high dimensional case, such as the $R^2, Adjusted-R^2$ etc. This is because, for metrics such as $R^2$, increasing the number of variables (p) in the model, almost always increases the $R^2$ even when the variables have no significant relation to the response^[An example of an illustration showing what happens to a model when more variables which have no significant relationships to the response are added to the model. It is evident how adjusted R-squared almost always increases as the number of predictors increases, the training error always decreases as more predictors are added to a model due to possible over-fitting, but the test error increases, since the increased number of predictors add no predictive power to the model.]. Consequently, possible collinearity among the predictors causes the tests of significance in models to be biased.\n\n```{r f3}\n#| fig-width: 12\n#| fig-height: 5\n#| cache: true\n#| fig-show: \"hold\"\n\nset.seed(62)\ndd <- matrix(rexp(4000), ncol = 25) |>\n  data.frame()\ntrain_dd <- dd[1:100, ]\ntest_dd <- dd[101:160, ]\n\ntrain_mse <- test_mse <- adj_rsq <- vector()\nfor (i in 2:ncol(dd))\n{\n  temp_train <- data.frame(\n    cbind(train_dd[, 1], train_dd[, 2:i])\n  ) |>\n    setNames(str_c(\"X\", 1:i))\n  \n  temp_model <- lm(X1 ~ ., data = temp_train)\n  sm <- summary.lm(temp_model)\n  train_pred <- predict(temp_model)\n  test_pred <- predict(temp_model, test_dd)\n  \n  train_mse[i] <- mse(train_dd$X1, train_pred)\n  test_mse[i] <- mse(test_dd$X1, test_pred)\n  adj_rsq[i] <- sm$adj.r.squared\n}\n\npar(mfrow = c(1,3))\nplot(adj_rsq, type = 'o', pch = 20, main = \"Adjusted R-squared\",\n     xlab = \"# of predictors\", ylab = \"\")\nplot(train_mse, type = 'o', pch = 20, main = \"Train MSE\",\n     xlab = \"# of predictors\", ylab = \"\")\nplot(test_mse, type = 'o', pch = 20, main = \"Test MSE\",\n     xlab = \"# of predictors\", ylab = \"\")\n```\n\n# Models for high-dimensional data\n\nDue to the above-mentioned challenges, this study seeks to investigate models suitable for high-dimensional learning in the context of regression and classification.\n\nIn modelling high-dimensional data, it is of interest to identify variables and interactions which have a significant relationship to the response variable, and discard those which have no significant relationship. This leads to dropping some variables in the analysis in favor of others *(by setting their coefficients in the model to $0$)*, a technique commonly called **feature/variable selection**, or shrinking their coefficients in the model towards $0$, a technique termed **shrinkage.** In this study, the models used for shrinkage and variable selection are the Ridge and LASSO regression respectively. Both ridge and LASSO regression are commonly called *Penalized regression models* and are also referred to as regularization techniques since they control for possible over-fitting in models.\n\nDue to the 'wide' nature of data in high-dimensional settings, it is of interest to an analyst, to find a small subset of predictors, which have the most significance relation to the response. This can be achieved by transformations for reducing the dimensionality of the predictor space into a much smaller dimension, a technique known as: **dimensionality reduction**. The aim of the these methods is to find a subset of predictors, from the original predictor space, in such a manner that the high-dimensional problem is reduced to a low-dimensional one. It is important to note that: since the subset of predictors is constructed in such a way, that there is no correlation among the new subset of predictors, the issue of multi-collinearity is also solved. In this study we investigate the following dimensionality reduction techniques: Principle Components analysis, Kernel Principal Components analysis, Independent component analysis, and Partial least squares.\n\n---  \n\n# Penalized regression methods\n\n## Ridge regression\n\nThis is a shrinkage based method for regression (suitable for $p > n$ data), which aims to supplement the Ordinary Least Squares method, especially in the context of high multi-collinearity.\n\nRecall, that for the orindary least squares model of the form:\n\n$$y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_p x_p + \\epsilon_t$$\n\nThe error function is of the form:\n\n$$Q = \\sum{(y_i - \\hat{y_i})^2}$$\n$$where: \\hat{y_i} = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_p x_p$$\n\nIn slving for the coefficients of regression, we obtain the following closed-form solution:\n\n$$\\beta = (X^T X)^{-1} (X^T Y)$$\n\nHowever, in the prescence of many predictors, there is the ever-present risk of multi-collinearity, and thus the $(X^T X)$ matrix will not be of full rank, and hence not invertible. This in turn makes the coefficients of the regression model to grow large and unstable.\n\nA work around is to change the error function of the regression model to be:\n\n$$Q_{L2} = \\sum{(y_i - \\hat{y_i})^2} + \\lambda_r \\sum{\\beta^2_j}$$\n\nThis choice of error function, has the advantage that the error function remains a quadratic function of the regression coefficients, and its exact closed-form solution can be obtained by equating the gradient of the error function to $0$, and solving for $\\beta$ to obtain:\n\n$$\\beta = (X^T X + \\lambda I)^{-1} (X^T Y)$$\n\nThe $\\lambda$ is called a penalty term or regularization coefficient, and this technique is called **ridge regression**. The penalty term must increase when the coefficients grow large, in order to enforce minimization. In result, the penalty causes the regression coefficients to become smaller and shrink towards 0, this makes the model much interpretable.\n\nThis particular choice of regularizer is known as *weight decay* in machine learning, or *parameter shrinkage* in statistics, since it has the tendancy to shrink parameter values towards 0\n\n## LASSO regression\n\nA different choice of the regularizer could be obtained using the following error function:\n\n$$Q_{L1} = \\sum{(y_i - \\hat{y_i})^2} + \\lambda_L \\sum{|\\beta_j|}$$\n\nThis method is called: *Least absolute shrinkage and selection operator*: **(LASSO)**. In modifying the error function to include the regularizer, lasso regression forces some regression coefficients to be 0, and in doing so, it practically selects model terms to an optimal number of predictors. This makes it a feature selection model.\n\nThe advantage of the LASSO regression over ridge regression is that: although ridge regression shrinks parameter estimates towards 0, it does not lead to any parameter estimates being 0, hence for the ridge regression, all (p) predictors are included in the model *(which might hurt model interpretability)*. However, for the LASSO regression, the nature of its regularizer ensures that some parameter estimates are set to 0, hence effectively eliminating them from the model. Hence the LASSO regression has he advantage of producing simpler interpretable models than ridge regression. It should be noted however that this does not hurt the predictive ability of the ridge regression model.\n\n## Elastic-Net Regression (Combining Ridge and LASSO regression)\n\nSince ridge regression has the advantage of combating multi-collinearity, and the LASSO regression has the advantage of being a feature/variable selection model, the two models can be combined, in order to deal with both multi-collinearity, and feature selection at once. \n\nThe form of the error function of model is shown below:\n\n$$Q = \\sum{(y_i - \\hat{y_i})^2} + \\lambda [ (1 - \\alpha)\\sum{\\beta^2_j} + \\alpha \\sum{| \\beta_j |} ]$$\n\nHere, $\\lambda = \\lambda_r + \\lambda_L$ , and the proportion of $\\lambda$ associated with the lasso is denoted $\\alpha$. Thus, selecting $\\alpha = 1$ would be a full lasso penalty model, selecting $\\alpha = 0$ would be a full ridge regression model, whereas $\\alpha = 0.5$ is an even  mix of a ridge and lasso model.\n\n## Search for optimal $\\lambda$ \n\nThe optimal value of $\\lambda$ for the ridge and LASSO regression model is found by means of cross-validation, where several choices of $\\lambda$ are used on the training set, and the performance of the models are evaluated on a validation set,so that the value of $\\lambda$ which yields the least training error, is preferred. For Elastic-Net regression, a common method of selecting the best regularization coefficient, is to construct a grid of $\\alpha$ values, and for each value of $\\alpha$, the best regularization coefficient $\\lambda$ is found. The fitted models are then compared based on validation error.\n\n---\n\n# Dimensionality Reduction methods\n\nDimensionality reduction methods are useful in reducing the dimensionality of datasets, from a high-dimensional space to a low dimensional space, for a number of reasons:\n\n- High-dimensional data increases computation time in model fitting\n\n- High-dimensional data is often plagued with highly correlated variables.\n\nThese challenges above necessitate, finding only a small subset of predictors which summarize maximal variability in the original predictor space significantly. Such methods include:\n\n1. Principal Components Analysis (PCA)\n\n2. Kernel Principal Components Analysis (K-PCA)\n\n3. Independent Component Analysis (ICA)\n\n4. Partial Least Squares (PLS)\n\n5. Non-negative matrix factorization (NNMF)\n\nAll the techniques listed above work by taking an input matrix $X$, which is an $n * p$ matrix, and return a matrix of scores *(often called components)*, which are combinations of the columns of the original data matrix.\n\nIt is however important to note that $PCA, K-PCA, ICA, NNMF$ are *unsupervised* techniques, and their aim is to reduce the number of predictors into a subspace of predictors, with the hope that the new subset of predictors will be significant in explaining the variability in the response, although this is not always the case. Their aim is to reduce the predictor space into a smaller subset with the aim of reducing computation time and possible multi-collinearity, but not necessarily improve predictive performance.\n\nThe $PLS$ technique is a *supervised* technique, in that it performs dimensionality reduction, while ensuring that the subset of predictors obtained is significantly related to the response variable. Thus, when using PLS, there is some guarantee of improving predictive performance, while reducing computation time in model fitting.\n\nIn this article, we will not cover the non-negative matrix factorization method.\n\n## Principal Components Analysis\n\n::: column-margin\nRecall that, for a data matrix A, and an identity matrix I, the eigen values are $\\lambda$ such that:\n$$|A - \\lambda I| = 0$$\nThe corresponding eigen vector $\\hat{v}$, of an eigen value $\\lambda$ satisfies the equation:\n$$(A - \\lambda I) \\hat{v} = 0$$\n:::\n\nPrincipal Components Analysis (PCA) is the most popular dimensionality reduction method. The aim of PCA is to find a subset of predictors, which is esentially a linear combination of the original predictor space, such that the combinations explain maximal variability of the original predictor space.\n\nIn PCA, the new features formed^[Often called scores or components], are usually orthogonal to each other^[Implying they're uncorrelated, and thus there is minimal overlap in the information provided by each score].  This makes it a very useful tool in dealing with multi-collinearity.\n\nWe consider an $n*p$ centered data matrix $X$, where n is the number of observations, and p is the number of predictors. We then create a $p*p$ matrix, whose columns are eigen vectors of $(X^T X)$. \n\nThe matrix $W$ is the matrix of unit eigen vectors. In constructing $W$, we usually ensure that eigen vectors are ranked by the highest eigen value i.e. components with the highest explanatory power come first. It follows that $W$ is orthogonal, i.e. $W^T = W^{-1}$\n\nThe principal components decomposition $P$ of $X$ is then defined as: $P= XW$\n\nA popular application of principal components analysis is *principal components regression*, where the predictor matrix is first reduced into a matrix of scores using PCA, and this matrix of scores is then fed into regression.\n\n## Kernel Principal Components Analysis\n\nRecall that PCA is useful in forming component by extracting linear combinations of predictors from the original predictor space, hence it is useful only when there are linear patterns in the predictor space.\n\nBut supposing that, the functional form of the data at hand is given by the following equation below:\n\n$$y = x_1 + x_2 + x_1^2 + x_2^2 + \\epsilon_t$$\n\nThen, using PCA will only construct linear combinations of $x_1$ and $x_2$, thus missing out the important quadratic relationships in the data.\n\nThus in the presence of possible non-linear relationships in the data, Kernel-PCA is better suited.\n\nK-PCA extends PCA using kernel methods, so that for linear combinations of variables, K-PCA captures this using the linear kernel:\n\n$$k(x_1, x_2) = x_1^Tx_2$$\n\nAlthough the linear kernel could be substituted using any other kernel of choice, such as the polynomial kernel:\n\n$$k(x_1, x_2) = <x_1, x_2>^d$$\nso that for quadratic relationships, we set $d = 2$:\n\n$$k(x_1, x_2) = <x_1, x_2>^2 = (x_{11}x_{12} + ... + x_{n1}x_{n2})^2 $$\n\n\n## Independent Components Analysis\n\nRecall, PCA forms scores using linear combinations of the original predictor space such that the new scores formed are orthogonal with each other, and thus uncorrelated, however this does not mean that the scores are statistically independent of each other.^[This is because in certain cases, the correlation could be 0, however the covariance could be indicating otherwise, except in cases where data comes from the gaussian distribution, where un-correlation implies independence.]\n\nICA bears some similarity with PCA^[It should however be noted that scores generated by ICA  are different from PCA scores], however in creating the scores, it does so in a way that the scores are statistically independent of each other. Generally, ICA tends to model a broader set of trends than PCA, which is only concerned with orthogonality.\n\nGiven a random observed vector $X$,whose elements are mixtures of independent elements of a random vector $S$ given by:^[Both $X$ and $S$ are vectors of length $m$]\n\n$$X = AS$$\n\nWhere $A$ denotes a mixing matrix of size $m*m$, the goal of ICA is to find the un-mixing matrix $W$^[An inverse of the mixing matrix $A$], that will give the best approximation of $S$ \n\n$$WX \\approx S$$\n\nICA makes the following assumptions about data:\n\n1. Statistical independence in the source signal\n\n2. Mixing matrix must be a square matrix of full rank.\n\n3. The only source of randomness is the vector $S$.\n\n4. The data at hand is centered and whitened.^[Centered data is data which has been *demeaned*, and whitening could be achieved by first running PCA on the original data and using the whole set of components as input data to ICA]\n\n5. The source signals must not have a gaussian distribution except for only one source signal.\n\nICA constructs scores based on two methods:\n\n- Minimization of mutual Information\n\nFor a pair of random variables $X, Y$, the mutual information is defined as follows:\n\n$$I(X;Y) = H(X) - H(X|Y)$$\nWhere:\n\n$H(X)$: is the entropy of $X$.\n\n$$H(X) = - \\sum_x{P(x)\\log{P(x)}}$$\n\n$H(X|Y)$: is the conditional entropy.^[The entropy of $X$ conditional on $Y$ taking a certain value $y$]\n\n$$H(X|Y) = H(X, Y) - H(Y)$$\n\nwhere:\n\n$H(X, Y)$: is the joint entropy given by:\n\n$$H(X, Y) = - \\sum_{x, y}{P(x, y) \\log{P(x, y)}}$$\n\nFrom the above equations, entropy can be seen as a measure of uncertainty of information in a random variable, so that the lower the value of entropy, the more information we have about the random variable of interest. Therefore by seeking for a method of maximizing mutual information, we would be seeking for components which are maximally independent.\n\n- Maximization of non-gaussianity.\n\nThis is a second method of constructing independent components. Since in the assumptions underlying ICA, is the assumption of non-gaussianity of the source signals, then, one way of extracting components is to maximize non-gaussianity of the components.^[Forcing the components to be as far as possible from the gaussian distribution].\n\nAn example of a non-gaussianity measure is the *Negentropy*, given by:\n\n$$N(X) = H(X^N) - H(X)$$\n\nWhere:\n\n$X$: is a random non-gaussian vector.\n\n$X^N$: is a gaussian random vector with same covariance matrix as $X$.\n\n$H(.)$: is the entropy.\n\nSice the gaussian distribution has the highest entropy for any given covariance matrix,then the negentropy: $N(X)$ is a strictly positive measure of non-gaussianity.\n\n## Partial Least Squares\n\nPartial Least Squares (PLS) is a *supervised* dimensionality reduction method, in that the response variable is used in guiding the dimensionality reduction process unlike in the context of PCA. Hence in constructing the components, PLS does so in a way that the components not only summarize maximal variability in the predictor space, but also are related to the response significantly.\n\nGiven $p$ predictors: $X_1, X_2, ... , X_p$, and the response variable $Y$, we construct linear combinations of our original predictors: $Z_1, ..., Z_m, \\hspace{2 mm} m < p$, components:\n\n$$Z_m = \\sum_{j=1}^p {\\phi_{jm} X_j}$$\n\nWhere: $\\phi_{jm}$: are some constants.\nIn computing the first PLS direction $Z_1$, PLS sets each $\\phi_{j1}$ equal to the coefficient from a simple linear regression of $Y$ onto $X_j$ ^[It can be shown that this coefficient is proportional to the correlation between $X_j$ and $Y$], hence it is evident that PLS places larger weight on variables which are highly correlated to the response variable.\nThe second PLS direction is first computed by taking the residuals after regression each variable on $Z_1$^[The residuals are interpreted as: amunt of information that has not been accounted for by the first PLS direction]. The second PLS direction: $Z_2$ is computed using the *orthogonalized* data in the same fashion as $Z_1$, and this procedure is repeated to obtain the $m$ PLS components.\n\n--- \n\n# Data\n\nThe data used in modelling is a financial dataset aimed at using various statistical and financial metrics to predict the return for quarterly returns data for a selected stock price series. The dataset is comprised of 78 numerical predictor variables(statistical and financial metrics), and a response variable^[The return for a particular quarter in the regression setting, and the Direction(i.e. whether there was a rise/drop in the quarterly return), in the classification setting]. The dataset is constructed using the metrics from the package `PerformanceAnalytics` in R, and using the return series of KCB Group from the period 1st January 2001, to 31st January 2021. The financial benchmarking metrics are computed using FTSE NSE 20^[A price weighted portfolio of 20 best performing counters in the Nairobi Securities Exchange as the benchmark] as the benchmark. The nature of the dataset makes it impossible to fit a standard Multiple Linear Regression model, or even a Generalized Linear Model(GLM) to the data (since $p(78) >> n(64)$, in the training dataset). A glimpse of the first 49 variables present in the data are shown below:^[Note that the variable *Direction*, which is the response variable in the classification setting is not included in the glimpse of the data. It is a binary variable constructed from the differenced Annualized Return variable, such that if the change in return is Negative, the Direction is *DOWN* indicating that the stock dropped in terms of quarterly returns, otherwise, the Direction is *UP*, indicating that the stock quarterly return rose, from the previous quarter.]\n\n```{r dataloading}\ngl <- cbind(t(head(fdf, 2)),\n            t(tail(fdf, 1))) |>\n  data.frame()\ngl[, 2] <- '...'\ncolnames(gl) <- c(rownames(fdf)[1], '...', rownames(fdf)[ncol(fdf)])\nkable(gl)\n```\n\nA chart of the correlation between the predictor variables is shown below:\n\n```{r corrplot}\n#| fig-width: 15\n#| fig-height: 15\n#| cache: true\n#| \n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(fdf[, -1]),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .7,\n                   tl.col = \"black\")\n```\n\nIt is evident that there exists (both positive and negative) high correlation between the predictors, which poses a challenge if multi-collinearity in the model fitting process. The high positive correlation  is visible in predictors which are related to measures of downside risk, while the high negative correlation is evident between variables which measure tail risk, and those which measure downside risk. There is little to no correlation between variables which measure central tendancy (mean and median returns, and their respective ratios) and the variables which measure the riskiness of the returns series.\n\nFor both models, the training and testing sets are constructed from the data using simple random sampling of the original data, so that 80% of the full dataset goes into training the models, while the remaining 20% of the data goes to the testing data. For the classification model, the resulting subsets are analyzed to ensure that there is class balance in the response variable.\n\nThe key reason we randomize the data, when splitting into training and testing set, is because, for the purpose of this analysis, we are not interested in the temporal structure of the data.\n\nIn the regression setting, the predictor variables are lagged by one time period, so that the financial metrics of of quarter $i-1$ are used in predicting the return for quarter $i$. In the classification setting, since the Direction variable is automatically lagged, we back-shift it, so that, the financial metrics of quarter $i-1$, are used in predicting the Direction of the next quarter $i$. This is necessary since, it helps us in mitigating look-ahead bias.\n\n---- \n\n# Models \n\n# Regression model (I)\n\n\n```{r regmodel1}\n# constructing the training and testing set\nset.seed(472)\ntrain_rows <- sample(.80*nrow(fdf))\ntrain <- fdf[train_rows, ]\ntest <- fdf[-train_rows, ]\n\n# constructing the model matrix\nx <- model.matrix(`Annualized Return` ~ ., data = fdf)[, -1]\ny <- as.matrix(fdf[, \"Annualized Return\"])\n```\n\n## Ridge Regression\n\n```{r ridge1}\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of ridge regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-height: 5\n#| fig-width: 5\n#| cache: true\n#| fig-show: \"hold\"\n#| column: margin\n\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"gaussian\",\n                    alpha = 0)\nplot(cv.out)\n# cv.out$lambda.min #> 12.75054\n```\n\nWe proceed to fit ridge regression on the data, and select the regularization parameter using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 12.75054]. The cross validation statistics are shown below:\n\n```{r ridge2}\n#| cache: true\n#| fig-width: 5\n#| fig-height: 5\n\n# fitting best model with cross-validation lambda\nridge_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"gaussian\",\n                        alpha = 0,\n                        lambda = cv.out$lambda.min)\n\n# fitting best model with gradient descent lambda\n# ridge_best_sgd <- glmnet(x = x[train_rows, ],\n#                         y = y[train_rows, ],\n#                         family = \"gaussian\",\n#                         alpha = 0,\n#                         lambda = 0.000383379039462451)\n\ncf_cv <- as.numeric(coef(ridge_best_cv))\n# cf_sgd <- as.numeric(coef(ridge_best_sgd))\n\nridge_coef_data <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n  #coef_sgd = cf_sgd\n)\n\nr1 <- ridge_coef_data |>\n  select(coef_cv) |>\n  unlist() |> as.numeric() |>\n  quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n  as.numeric() |> data.frame() |>\n  setNames(\"quantiles\") |>\n  mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n  ggplot()+\n    geom_line(aes(x = prob, y = quantiles)) +\n  scale_x_continuous(labels = scales::percent_format())+\n    labs(title = \"Distribution of model coefficients: (Ridge-CV)\",\n         x = \"Quantile Probability\", y= \"Coefficient value\")+\n    theme_minimal() + \n  scientific_theme\n# Majority (nearly 75%) of coefficients have very very small values\n\n# r2 <- ridge_coef_data |>\n#   select(coef_sgd) |>\n#   unlist() |> as.numeric() |>\n#   quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n#   as.numeric() |> data.frame() |>\n#   setNames(\"quantiles\") |>\n#   mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n#   ggplot()+\n#   geom_line(aes(x = prob, y = quantiles)) +\n#   scale_x_continuous(labels = scales::percent_format())+\n#   labs(title = \"Distribution of model coefficients: (Ridge-G)\",\n#        x = \"Quantile Probability\", y= \"Coefficient value\")+\n#   theme_minimal()\nr1\n#grid.arrange(r1, r2, nrow = 1)\n```\n\nThe model fitted using the regularization parameter obtained by cross validation *(Ridge CV)*, has roughly 70% of the model coefficients shrunken to be close to 0, showing how effective ridge regression is in producing interpretable models.\n\n\n## LASSO Regression\n\nWe proceed to fit LASSO regression on the data, and select the regularization parameter using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 0.1893415.]. The cross validation statistics are shown below:\n\n```{r lasso1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of LASSO regression and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"gaussian\",\n                    alpha = 1)\nplot(cv.out)\n# cv.out$lambda.min #> 12.75054\n```\n\n\n```{r lasso2}\n#| cache: true\n#| fig-width: 5\n#| fig-height: 5\nlasso_best_cv <- glmnet(x = x[train_rows, ],\n                     y = y[train_rows, ],\n                     family = \"gaussian\",\n                     lambda = 0.1893415,\n                     alpha = 1)\n\n# lasso_best_sgd <- glmnet(x = x[train_rows, ],\n#                         y = y[train_rows, ],\n#                         family = \"gaussian\",\n#                         lambda = 0.00275750934775019,\n#                         alpha = 1)\n\ncf_cv <- as.numeric(coef(lasso_best_cv))\n# cf_sgd <- as.numeric(coef(lasso_best_sgd))\n\nlasso_coef_data <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n  #coef_sgd = cf_sgd\n)\n\nl1 <- lasso_coef_data |>\n  select(coef_cv) |>\n  mutate(status = ifelse(coef_cv == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n  ggplot()+\n  geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n  labs(title = \"Distribution of model coefficients: (LASSO-CV)\",\n       x = \"Status\", y= \"Coefficient count\")+\n  theme_minimal() +\n  scientific_theme\n\n# l2 <- lasso_coef_data |>\n#   select(coef_sgd) |>\n#   mutate(status = ifelse(coef_sgd == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n#   ggplot()+\n#   geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n#   labs(title = \"Distribution of model coefficients: (LASSO-g)\",\n#        x = \"Status\", y= \"Coefficient count\")+\n#   theme_minimal()\nl1\n#grid.arrange(l1, l2, nrow = 1)\n```\n\n\nThe model fitted using the regularization parameter obtained from cross validation as shown above has forced majority of the model coefficients to be 0, thereby removing the variables from the model. The LASSO regression technique is therefore important in variable selection, since by setting some model coefficients to 0, it effectively removes them from the model, leaving us with a much smaller and interpretable model.\n\n## Elastic Net Regression\n\nIn this section, we fit an Elastic Net model, which is a mixture of both ridge and LASSO regression. We select the mixing-weight based on two methods:\n\n1. We compute the model regularization parameter $\\lambda$, as a sum of the cross validation value of $\\lambda$ computed in ridge regression, and that computed from LASSO regression. i.e.\n\n$$\\lambda = \\lambda_R + \\lambda_L$$\nWe then run a cross validation using this fixed $\\lambda$ on several values of $\\alpha$, and obtain the statistics as shown in the following chart:\n\n```{r elnet1}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n#| fig-cap: \"Using the regularization parameter obtained from cross validation\"\n\n# we are using benchmark: the value of lambda as: lambda_ridge + lambda_lasso found from cv.glmnet\nlambda_full <- (12.75054 + 0.1893415)\nalpha_seq_1 <- seq(from = 0, to = .01 + (0.1893415/lambda_full), length = 100)\ndeviance_vec <- nvars_vec <- err_vec <- vector()\nfor (i in 1:length(alpha_seq_1))\n{\n  mixture_model <- glmnet(x = x[train_rows, ],\n                          y = y[train_rows, ],\n                          family = \"gaussian\",\n                          alpha = alpha_seq_1[i],\n                          lambda = lambda_full)\n  \n  deviance_vec[i] <- mixture_model$dev.ratio\n  nvars_vec[i] <- mixture_model$df\n  err_vec[i] <- mse(\n    y[train_rows, ],\n    predict(mixture_model,\n            newx = x[train_rows, ])\n  )\n}\n\nm1 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = deviance))+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Deviance explained\")+\n  theme_minimal()+\n  scientific_theme\n\nm2 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = nvars))+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Non-zero coefficients\",\n       x = \"Alpha\", y = \"Count\")+\n  theme_minimal()+\n  scientific_theme\n\nm3 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec,\n  err = err_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = err_vec))+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"Alpha\", y = \"MSE\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m1, m2, m3, nrow = 1)\n```\n\n\n2. In this second method, we construct a grid of $\\alpha$ values which are equally spaced on the range $[0, 1]$, and for each $\\alpha_i$, we perform cross validation on the training set to obtain the most suitable value of the regularization parameter $\\lambda_i$.^[This is the most suitable technique to use in Elastic-Net regression.] The result is shown below:^[Cross validation is performed to determine the best value for the regularization coefficient for every value of alpha chosen. The value of alpha = 0.386387387, and the corresponding lambda = 0.1106008, gave the lowest training error(0.4), as well as the highest deviance(37%), using only 19 non-zero model coefficients.]\n\n```{r elnet2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nmixture_grid <- read.csv(\"data/lm_mixture_grid.csv\")\n\n#   alpha       lambda    deviance    nvars mse\n# \t0.386387387 0.1106008 0.36776076  19    0.4072456\n\n# plotting a heatmap\nm3 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = lambda)) +\n  geom_line(alpha= .1)+\n  geom_smooth(method = \"gam\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Regularization parameter\",\n       x = \"Alpha\", y = \"Lambda\") +\n  theme_minimal()+\n  scientific_theme\n\nm4 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = deviance)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Explained(%)\") +\n  theme_minimal()+\n  scientific_theme\n\nm5 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = rmse)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"ALpha\", y = \"MSE\") +\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m3, m4, m5, nrow = 1)\n```\n\nFrom the above chart, it shows that, as the value of $\\alpha$ increases, then the regularization parameter $\\lambda$ reduces, which shows that for this model, a very small proportion of $\\lambda$ was attributed to the LASSO penalty. The deviance resulting from this is quite low (less than 30%). The training error, as well as the deviance are suitable for small values of alpha chosen. For the Elastic Net regression, we will proceed with this $2^{nd}$ model hyper-parameters, since it gives a lower training error, for few variables, as compared to the rest.\n\n```{r}\nmixture_best <- glmnet(x = x[train_rows, ],\n                       y = y[train_rows, ],\n                       family = \"gaussian\",\n                       alpha = 0.386387387, # 0.1141151\n                       lambda = 0.1106008)# 0.2832865\n```\n\n\n## Principal Components Regression\n\n```{r pca1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that PCA constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\npcr_model <- pcr(`Annualized Return` ~ .,\n                 data = train,\n                 scale = T,\n                 center = T,\n                 validation = 'CV')\n# summary(pcr_model) # Best model is Lowest RMSE: 1 comps, 5 comps\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(pcr_model$scores),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n```\n\nIn this section, Principal components analysis model is fitted using only 56 principal components and the results of the Principal Components Regression are displayed. \n\n```{r pca2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvar_Explained_df <- data.frame(\n  component = 1:56,\n  component_var = pcr_model$Xvar/sum(pcr_model$Xvar)\n) |>\n  mutate(cum_var = cumsum(component_var))\n\np1 <- var_Explained_df |>\n  ggplot(aes(x = component, y = component_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variance explained\",\n       x = \"Component\", y = \"Variance\")+\n  theme_minimal() +\n  scientific_theme\n\np2 <- var_Explained_df |>\n  ggplot(aes(x = component, y = cum_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variance explained\",\n       x = \"# of Components\", y = \"Variance\")+\n  theme_minimal() +\n  scientific_theme\n\ngrid.arrange(p1, p2, nrow = 1)\n\n```\n\nFrom the scree-plot above, it is evident that the first two components account for maximal variability in the predictor matrix. In choosing the suitable number of components to run regression with, we examine the plot of cross-validation error below:\n\n```{r pca3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\nvalidationplot(pcr_model, val.type = 'RMSEP', type = 'o',\n               main = \"Cross validation (PCR)\",\n               ylab = \"RMSE\", xlab = \"Number of components\")\n```\n\nFrom the validation plot using RMSE as the error metric, the model with the lowest cross validation error is the 2-components model, which we will proceed with.\n\n## Kernel Principal Components Regression\n\n```{r kpca1}\nstep_init <- recipe(`Annualized Return` ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-1]\nsig_range <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  prep(training = train, verbose = TRUE) |>\n  juice(all_of(cn_updated)) |>\n  as.matrix() |>\n  sigest(frac = 1) \n\nkpca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_kpca(\n    cn_updated, \n    num_comp = 30, \n    options = list(kernel = \"rbfdot\", kpar = list(sigma = sig_range[2]))\n  )\n\nkpca_model <- \n  kpca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\n```\n\n```{r kpca2}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that k-PCA constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\nkpca_features <- juice(kpca_model, matches(\"PC\"))\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(kpca_features),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n```\n\nIn this section, the Kernel-PCA is first performed on the predictor matrix, and then the most optimal subset of the resulting components constructed is used to fit a linear regression model on our training dataset. For the Kernel-PCA, we chose a radial basis kernel, where the hyper-parameter $\\sigma$ was chosen automatically based on our data.\n\n::: column-margin\nThe estimated value of $\\sigma$, is based upon the 10%, and 90% quantile of $||x - x^`||^2$, where we chose $\\sigma$ as the median value of: 0.008732801.\n:::\n\nThe charts below show the percentage variability in the original predictor matrix explained by the resulting kernel principal components:\n\n```{r kpca3}\n#| cache: true\n#| fig-height: 10\n#| fig-width: 10\nkpca_eigen <- read.csv(\"data/lm_kpca_eigen.csv\")\n\n# plotting\nk1 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = component_contribution))+\n  geom_point(aes(x = (component), y = component_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal() + \n  scientific_theme\n\nk2 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = group_contribution))+\n  geom_point(aes(x = (component), y = group_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal() + \n  scientific_theme\n\nk3 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_error))+\n  geom_point(aes(x = (component), y = train_error))+\n  labs(subtitle = \"Cross-validation Training error\",\n       x = \"# of Components\",y = \"RMSE\")+\n  theme_minimal() + \n  scientific_theme\n\nk4 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = y_explained))+\n  geom_point(aes(x = (component), y = y_explained))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variability in response explained\",\n       x = \"# of Components\",y = \"Adjusted R-squared\")+\n  theme_minimal() + \n  scientific_theme\n\ngrid.arrange(k1, k2, k3, k4, nrow = 2)\n```\n\nFrom the scree plot on chart 1, it is evident that the first 4 kernel principal components explain maximal variability in the original predictor matrix. The cross validation training error increases as more components are added into the model. In selecting the optimal number of principal components to include in the model, we select 10 components, since this gives the highest amount of variability explained in the response variable.\n\n```{r kpca4}\n# Predicting the test data\nprep_test <- bake(kpca_model, test)\n\n# Model fitted to the 16 components\nkpc_df <- cbind(kpca_features[, 1:16], \n                 train[, \"Annualized Return\"]) |>\n  setNames(c(colnames(kpca_features)[1:16], \"Annualized Return\"))\n\nkpc_lm <- lm(`Annualized Return` ~ ., data = kpc_df)\n```\n\n## Partial Least Squares\n\n```{r pls1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that PLS also constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\npls_model <- plsr(`Annualized Return` ~ .,\n                  data = train,\n                  scale = T,\n                  center = T,\n                  validation = 'CV')\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(pls_model$scores),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n\n```\n\nThis section covers the analysis section for the partial least squares model. The PLS model is fitted using cross-validation, and the data is centered and scaled before the model fitting process.\n\nThe scree-plot for the PLS model is shown below\n\n```{r pls2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvar_Explained_df <- data.frame(\n  component = 1:56,\n  component_var = pls_model$Xvar/sum(pls_model$Xvar)\n) |>\n  mutate(cum_var = cumsum(component_var))\n\np3 <- var_Explained_df |>\n  ggplot(aes(x = component, y = component_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variance explained\",\n       x = \"Component\", y = \"Variance\")+\n  theme_minimal()+\n  scientific_theme\n\np4 <- var_Explained_df |>\n  ggplot(aes(x = component, y = cum_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variance explained\",\n       x = \"# of Components\", y = \"Variance\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(p3, p4, nrow = 1)\n```\n\nThe above chart shows that the first 4 components explain majority of the variability in the original predictor matrix (roughly 70%). The Training error from cross validation is shown below:\n\n```{r pls3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvalidationplot(pls_model, val.type = 'RMSEP', type = 'o',\n               main = \"Cross validation training error\",\n               xlab = \"Number of components\", ylab = \"Root-MSE\")\n```\n\nFrom this chart, we select only the first component, to include in our final PLS model, since it gives the lowest cross validation error. A comparison of the variability in the response explained by the PCR and PLS model is shown below, in order to capture the difference between PLS and PCR.\n\nTo examine the difference between PLS and PCA in explaining the response variable, we examine the (%) variance explained in the response by each component as shown below:\n\n```{r pls4}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\ncomp_pcr_pls <- data.frame(\n  component = 1:56,\n  pcr_y = c(6.371, 9.485, 9.514, 15.52, 18.89, 21.24, 22.73, 22.73, 23.43, \n23.49, 24.11, 27.96, 29.79, 32.94, 32.95, 40.12, 40.78, 41.33, \n41.34, 41.35, 41.61, 41.62, 43.01, 44.65, 44.92, 45.03, 45.03, \n45.21, 46.65, 50.65, 50.95, 50.98, 52.68, 53.37, 53.46, 54.42, \n55.25, 56.66, 62.93, 64.27, 64.7, 65.41, 69.03, 69.28, 74.77, \n76.58, 77.39, 77.43, 77.61, 77.61, 82.76, 84.51, 84.69, 84.69, \n84.94, 88.58),\npls_y = c(14.04, 25.9, 34.83, 43.67, 46.56, 48.28, 51.06, 53.97, 57.33, \n59.73, 62.36, 65, 66.39, 68.83, 70.39, 72.24, 73.26, 74.16, 74.63, \n75.52, 76.62, 77.28, 78.49, 79.24, 79.92, 80.94, 81.45, 81.66, \n82.19, 83.03, 83.53, 84.46, 84.83, 86.38, 87.09, 87.66, 88.72, \n89.3, 89.79, 90.1, 90.63, 91.26, 92.39, 93.62, 94.7, 95.38, 95.5, \n95.75, 96.04, 96.38, 96.64, 96.95, 97.14, 97.34, 97.78, 97.93\n)\n) |>\n  mutate(pcr_y = pcr_y/100,\n         pls_y = pls_y/100)\n\ncomp_pcr_pls |>\n  ggplot()+\n  geom_point(aes(x = component, y = pcr_y, col = \"PCR\"))+\n  geom_line(aes(x = component, y = pcr_y, col = \"PCR\"))+\n  geom_line(aes(x = component, y = pls_y, col = \"PLS\"))+\n  geom_point(aes(x = component, y = pls_y, col = \"PLS\"))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = \"Comparison of PCR AND PLS\",\n       x = \"# of components\",\n       y = \"Variance in response explained\")+\n  theme_minimal()+\n  scientific_theme\n```\n\nFrom the chart above, it is evident that for any number of principal components, the PLS explains the highest variability in the response variable, since it is a *supervised* dimensionality reduction technique, where the response variable guides the reduction process, as compared to the PLS which is an unsupervised technique.\n\n## Independent Components Analysis\n\n```{r ica1}\nset.seed(37)\nica_model <- step_init |>\n  step_ica(\n    all_of(cn_updated),\n    num_comp = 30,\n    options = list(\n      maxit = 1000,\n      tol = 1e-10\n      #alg.type = \"deflation\"\n    )\n  )\n\nica_train <- \n  ica_model %>%\n  prep(training = train, verbose = TRUE)\n```\n\n```{r ica2}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that ICA also constructs components in a way that they are STATISTICALLY INDEPENDENT to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\nica_features <- juice(ica_train, matches(\"IC\"))\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(ica_features),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n\n```\n\nThis section gives a summary of the analysis performed using Independents Components Analysis. For the ICA, only 30 independent components are constructed. Results from the cross validation analysis performed on ICA features is shown below: \n\n```{r ica3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nica_stats <- read.csv(\"data/lm_ica_stats.csv\")\n\n# plotting\ni1 <- ica_stats |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_error))+\n  geom_point(aes(x = (component), y = train_error))+\n  labs(subtitle = \"Training error\",\n       x = \"# of Components\",y = \"Root-MSE\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- ica_stats |>\n  ggplot()+\n  geom_line(aes(x = (component), y = y_explained))+\n  geom_point(aes(x = (component), y = y_explained))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variability in response explained\",\n       x = \"# of Components\",y = \"Adjusted R-squared\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 1)\n```\n\n```{r ica4}\n# Predicting the test data\nprep_test <- bake(ica_train, test)\n\n# Model fitted to the 16 components\nica_df <- cbind(ica_features[, 1], \n                train[, \"Annualized Return\"]) |>\n  setNames(c(colnames(ica_features)[1], \"Annualized Return\"))\n\nica_lm <- lm(`Annualized Return` ~ ., data = ica_df)\n```\n\nBased on the cross validation plots, we proceed with an regression model fitted with only the first ICA components.\n\n\n## Comparison of models\n\n```{r c1}\n# prediction on the training data\ntrain_accuracy <- data.frame(\n  ridge_cv_pred = predict(ridge_best_cv, newx = x[train_rows, ]),\n  #ridge_sgd_pred = predict(ridge_best_sgd, newx = x[train_rows, ]),\n  lasso_cv_pred = predict(lasso_best_cv, newx = x[train_rows, ]),\n  #lasso_sgd_pred = predict(ridge_best_sgd, newx = x[train_rows, ]),\n  mixture_pred_train <- predict(mixture_best, x[train_rows, ]),\n  pcr_pred = predict(pcr_model, train, ncomp = 2),\n  pls_pred = predict(pls_model, train, ncomp = 1),\n  kpca_pred = predict(kpc_lm, kpca_features),\n  ica_pred = predict(ica_lm, ica_features),\n  actual = y[train_rows, ]\n)\n\n# test accuracy\nprep_test_ica <- bake(ica_train, test)\nprep_test_kpca <- bake(kpca_model, test)\n\n\ntest_accuracy <- data.frame(\n  ridge_cv_pred = predict(ridge_best_cv, newx = x[-train_rows, ]),\n  #ridge_sgd_pred = predict(ridge_best_sgd, newx = x[-train_rows, ]),\n  lasso_cv_pred = predict(lasso_best_cv, newx = x[-train_rows, ]),\n  #lasso_sgd_pred = predict(ridge_best_sgd, newx = x[-train_rows, ]),\n  mixture_pred_train <- predict(mixture_best, x[-train_rows, ]),\n  pcr_pred = predict(pcr_model, test, ncomp = 2),\n  pls_pred = predict(pls_model, test, ncomp = 1),\n  kpca_pred = predict(kpc_lm, prep_test_kpca),\n  ica_pred = predict(ica_lm, prep_test_ica),\n  actual = y[-train_rows, ]\n)\n\ntrain_err <- test_err <- vector()\nfor (i in 1:(ncol(train_accuracy) - 1))\n{\n  train_err[i] <- mse(train_accuracy[, \"actual\"],\n                      train_accuracy[, i])\n  test_err[i] <- mse(test_accuracy[, \"actual\"],\n                     test_accuracy[, i])\n}\n\nerr_df <- data.frame(\n  model = c(\"Ridge(CV)\", \"LASSO(CV)\", \"Elastic-Net\", \n            \"PCR\", \"PLS\", \"k-PCA\", \"ICA\"),\n  `Training error` = train_err,\n  `Testing error` = test_err\n)\n```\n\n\nIn this section, we compare all models fitted on the testing data. We use the mean squared error to gauge the best models.\n\n```{r c2}\nkable(err_df)\n```\n\nThe charts on performance are shown below:\n\n```{r c3}\n#| fig-width: 10\n#| fig-height: 5\nt1 <- err_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(model, train_err), y = train_err))+\n  labs(title = \"Training error\", x = \"Model\", y = \"MSE\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\n\nt2 <- err_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(model, test_err), y = test_err))+\n  labs(title = \"Testing error\", x = \"Model\", y = \"MSE\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\ngrid.arrange(t1, t2, nrow = 1)\n```\n\nFrom the above charts and statistics, it is evident that the Kernel PCA, and Elastic-Net regression model emerge the best, and their performance in both the training set and testing set is consistent. The PCR, PLS and ICA model offer a poor fit to the data in both two sets of data. The Ridge and LASSO regression models have more less the same performance in both sets of data. The performance of Kernel PCA indicates that there exists some non-linear dependencies on the data - which Kernel-PCA is good at uncovering as compared to PCA.\n\n\n# Classification models (II)\n\n```{r cl11}\nfdf <- read.csv(\"data/glm_fdf.csv\")\nrownames(fdf) <- fdf[, 1]\nfdf <- fdf[, -1]\ncolnames(fdf) <- c(\"Annualized Return\", \"Annualized Std Dev\", \"Annualized Sharpe (Rf=30.48%)\", \n\"rho1\", \"rho2\", \"rho3\", \"rho4\", \"rho5\", \"rho6\", \"Q(6) p-value\", \n\"daily  Std Dev\", \"Skewness\", \"Kurtosis\", \"Excess kurtosis\", \n\"Sample skewness\", \"Sample excess kurtosis\", \"Semi Deviation\", \n\"Gain Deviation\", \"Loss Deviation\", \"Downside Deviation (MAR=40%)\", \n\"Downside Deviation (Rf=30.48%)\", \"Downside Deviation (0%)\", \n\"Maximum Drawdown\", \"Historical VaR (95%)\", \"Historical ES (95%)\", \n\"Modified VaR (95%)\", \"Modified ES (95%)\", \"daily downside risk\", \n\"Annualised downside risk\", \"Downside potential\", \"Omega\", \"Sortino ratio\", \n\"Upside potential\", \"Upside potential ratio\", \"Omega-sharpe ratio\", \n\"Sterling ratio\", \"Calmar ratio\", \"Burke ratio\", \"Pain index\", \n\"Ulcer index\", \"Pain ratio\", \"Martin ratio\", \"Minimum\", \"Quartile 1\", \n\"Median\", \"Arithmetic Mean\", \"Geometric Mean\", \"Quartile 3\", \n\"Maximum\", \"SE Mean\", \"LCL Mean (0.95)\", \"UCL Mean (0.95)\", \"StdDev Sharpe (Rf=0.1%, p=95%):\", \n\"VaR Sharpe (Rf=0.1%, p=95%):\", \"ES Sharpe (Rf=0.1%, p=95%):\", \n\"Alpha\", \"Beta\", \"Beta+\", \"Beta-\", \"R-squared\", \"Annualized Alpha\", \n\"Correlation\", \"Correlation p-value\", \"Tracking Error\", \"Active Premium\", \n\"Information Ratio\", \"Treynor Ratio\", \"Beta CoVariance\", \"Beta CoSkewness\", \n\"Beta CoKurtosis\", \"Specific Risk\", \"Systematic Risk\", \"Total Risk\", \n\"Up Capture\", \"Down Capture\", \"Up Number\", \"Down Number\", \"Up Percent\", \n\"Down Percent\", \"Direction\")\n\n# constructing the training and testing set\nset.seed(472)\ntrain_rows <- sample(.80*nrow(fdf))\ntrain <- fdf[train_rows, ]\ntest <- fdf[-train_rows, ]\n\n# constructing the model matrix\nx <- model.matrix(Direction ~ ., data = fdf)[, -1]\ny <- as.matrix(fdf[, \"Direction\"])\n```\n\n## Ridge Regression\n\n```{r clr1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of ridge regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n# cross vaidating to find best lambda\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"binomial\",\n                    alpha = 0)\nplot(cv.out)\n```\n\nIn this section, we analyze a ridge regression model for classification A suitable regularization parameter was obtained using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 2.610173]. The model fit statistics are shown below:\n\n```{r clr2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\n# fitting the model with the best lambda\nridge_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"binomial\",\n                        alpha = 0,\n                        lambda = cv.out$lambda.min)\n\n# predicting the train and test data\nridge_prob_test <- predict(ridge_best_cv, x[-train_rows, ], type = \"response\")\nridge_prob_train <- predict(ridge_best_cv, x[train_rows, ], , type = \"response\")\nridge_pred_train <- ifelse(ridge_prob_train > 0.4892546, \"Up\", \"Down\")\nridge_pred_test <- ifelse(ridge_prob_test > 0.4892546, \"Up\", \"Down\")\n\ncf_cv <- as.numeric(coef(ridge_best_cv))\n\nr1 <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n) |>\n  select(coef_cv) |>\n  unlist() |> as.numeric() |>\n  quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n  as.numeric() |> data.frame() |>\n  setNames(\"quantiles\") |>\n  mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n  ggplot()+\n  geom_line(aes(x = prob, y = quantiles)) +\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(title = \"Distribution of model coefficients: (Ridge-CV)\",\n       x = \"Quantile Probability\", y= \"Coefficient value\")+\n  theme_minimal()+\n  scientific_theme\n\nridge_glm_prob <- predict(ridge_best_cv, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nr2 <- roc(response = train[,\"Direction\"], predictor = ridge_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: Ridge regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(r1, r2, nrow = 1)\n```\n\nIn the chart above, it is evident that about 60% of the model coefficients have shrunk to be close to 0, showing how effective ridge regression is in producing interpretable models. The performance of the ridge regression model on the training dataset is shown in the Receiver Operating Characteristic Curve, with an AUC of: 0.85435.\n\n## LASSO Regression\n\n```{r cl1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of LASSO regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n# cross vaidating to find best lambda\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"binomial\",\n                    alpha = 1)\nplot(cv.out)\n```\n\nIn this section, we analyze the LASSO regression model fitted. A suitable regularization parameter was obtained using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 0.07095985]. The model fit is displayed below:\n\n```{r cl2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\n# fitting the model with the best lambda\nlasso_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"binomial\",\n                        alpha = 1,\n                        lambda = cv.out$lambda.min)\n\n#predictions\nlasso_prob_test <- predict(lasso_best_cv, x[-train_rows, ], type = \"response\")\nlasso_prob_train <- predict(lasso_best_cv, x[train_rows, ], type = \"response\")\nlasso_pred_train <- ifelse(lasso_prob_train > 0.4854385, \"Up\", \"Down\")\nlasso_pred_test <- ifelse(lasso_prob_test > 0.4854385, \"Up\", \"Down\")\n\ncf_cv <- as.numeric(coef(lasso_best_cv))\n\nl1 <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n) |>\n  select(coef_cv) |>\n  mutate(status = ifelse(coef_cv == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n  ggplot()+\n  geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n  labs(title = \"Distribution of model coefficients: (LASSO-CV)\",\n       x = \"Status\", y= \"Coefficient count\")+\n  theme_minimal()+\n  scientific_theme\n\nlasso_glm_prob <- predict(lasso_best_cv, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nl2 <- roc(response = train[,\"Direction\"], predictor = lasso_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: LASSO regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(l1, l2, nrow = 1)\n```\n\nIn the chart above, it is evident that about 87% of the model coefficients have set to 0, showing how effective LASSO regression is in feature selection. The performance of the LASSO regression model on the training dataset is shown in the Receiver Operating Characteristic Curve, with an AUC of: 0.8592.\n\n## Elastic-net Regression\n\n```{r cel1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"The Receiver Operating Characteristic curve for the ElasticNet model using an alpha = 0.062063062, and lambda = 0.62452991. The Area Under Curve (AUC) is: 0.8641\"\n#| fig-width: 5\n#| fig-height: 5\nmixture_best <- glmnet(x = x[train_rows, ],\n                       y = y[train_rows, ],\n                       family = \"binomial\",\n                       alpha = 0.062063062, \n                       lambda = 0.62452991)\n\n# predictions\nelnet_prob_test <- predict(mixture_best, x[-train_rows, ], type = \"response\")\nelnet_prob_train <- predict(mixture_best, x[train_rows, ], type = \"response\")\nelnet_pred_train <- ifelse(elnet_prob_train > 0.50138058, \"Up\", \"Down\")\nelnet_pred_test <- ifelse(elnet_prob_test > 0.50138058, \"Up\", \"Down\")\n\nelnet_glm_prob <- predict(mixture_best, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nroc(response = train[,\"Direction\"], predictor = elnet_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: Elastic-Net regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\n```\n\nIn this section, the fit of the mixture of LASSO and Ridge regression on the data is shown. Suitable values for the mixing weight $\\alpha$, and the redularization parameter, $\\lambda$ are found using cross validation, where for a fixed value of $\\alpha$, the best $\\lambda$ is searched for, and several accuracy metrics are computed.\n\n```{r cel2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nmixture_grid <- read.csv(\"data/glm_mixture_grid_stock.csv\")\n\n# plotting the charts\nm1 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = lambda)) +\n  geom_line(alpha= .1)+\n  geom_smooth(method = \"gam\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Regularization parameter\",\n       x = \"Alpha\", y = \"Lambda\") +\n  theme_minimal()+\n  scientific_theme\n\nm2 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = deviance)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Explained(%)\") +\n  theme_minimal()+\n  scientific_theme\n\nm3 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = accuracy)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"ALpha\", y = \"MSE\") +\n  theme_minimal()+\n  scientific_theme\n\nm4 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = nvars)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Model sparsity\",\n       x = \"Alpha\", y = \"Non-zero coefficients\") +\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m1, m2, m3, m4, \n             nrow = 2)\n# we proceed with: alpha: 0.062063062 lambda: 0.62452991\n```\n\n\nFrom the charts above, it is evident that as the $\\alpha$ increases, then the model tends to be more sparse, the deviance explained decreases while the training error rate decreases. The best combination of the $\\alpha$, and $\\lambda$ parameter are chosen to minimize the cross validation error.\n\n## Principal Components Analysis\n\n```{r cp1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\n\npca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_pca(\n    all_of(cn_updated), \n    num_comp = 30,\n    id = 'pca')\n\npca_model <- \n  pca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\npca_features <- juice(pca_model, matches(\"PC\"))\n\n# Predicting the test data\nprep_test <- bake(pca_model, test)\n\n# Model fitted to the 2 components\npca_df <- cbind(pca_features[, 1:3], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(pca_features)[1:3], \"Direction\"))\npca_glm <- glm(factor(Direction) ~ ., data = pca_df, family = \"binomial\")\npca_glm_prob <- predict(pca_glm, type = \"response\")\n\n# predictions\npca_prob_test <- predict(pca_glm, prep_test, type = \"response\")\npca_prob_train <- predict(pca_glm, pca_features, type = \"response\")\npca_pred_train <- ifelse(pca_prob_train > 0.500132338, \"Up\", \"Down\")\npca_pred_test <- ifelse(pca_prob_test > 0.500132338, \"Up\", \"Down\")\n```\n\nIn this section, we ran the principal components analysis model using 30 principal components and the results of cross validation on the principal components are displayed.\n\n```{r cp2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nvar_pca <- recipes::tidy(pca_model, id = \"pca\", type = \"variance\") |>\n  create_var_explained() |>\n  select(component, `percent variance`, `cumulative percent variance`) |>\n  mutate(`percent variance` = (`percent variance`)/100,\n         `cumulative percent variance` = (`cumulative percent variance`)/100)\n\npca_acc <- read.csv(\"data/glm_pca_eigen_stock.csv\")\n\n# plotting\np1 <- var_pca |>\n  ggplot()+\n  geom_line(aes(x = (component), y = `percent variance`))+\n  geom_point(aes(x = (component), y = `percent variance`))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal()+\n  scientific_theme\n\np2 <- var_pca |>\n  ggplot()+\n  geom_line(aes(x = (component), y = `cumulative percent variance`))+\n  geom_point(aes(x = (component), y = `cumulative percent variance`))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal()+\n  scientific_theme\n\np3 <- pca_acc |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\np4 <- pca_acc |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(p1, p2, p3, p4, nrow = 2)\n```\n\n```{r cp3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"PCA is applied to the dataset, and the first two principal components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.8084\"\n#| fig-height: 10\n#| fig-width: 5\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\npp1 <- pca_model$template |>\n  ggplot()+\n  geom_point(aes(x = PC01, y = PC02, col = Direction))+\n  labs(title = \"Principal Components Analysis\",\n       x = \"PC-01\", y = \"PC-02\")+\n  theme_minimal() + \n  scientific_theme\n\npp2 <- roc(response = train[,\"Direction\"], predictor = pca_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: PCA\",\n       x = \"Specificity\", y = \"Sensitivity\") + \n  scientific_theme\n\ngrid.arrange(pp1, pp2, nrow = 2)\n```\n\nFrom the above charts, the first three principal components explain maximal variability in the predictor space. Cross validation on the training set indicates that, the first three principal components give the best model in terms of Overall accuracy and Kappa. Hence for the purpose of model fitting, we will only use three principal components.\n\n## Kernel Principal Components Analysis\n\n```{r ckpca1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\nsig_range <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  prep(training = train, verbose = TRUE) |>\n  juice(all_of(cn_updated)) |>\n  as.matrix() |>\n  sigest(frac = 1) \n\nkpca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_kpca(\n    all_of(cn_updated), \n    num_comp = 30, \n    options = list(kernel = \"rbfdot\", kpar = list(sigma = sig_range[2]))\n  )\n\nkpca_model <- \n  kpca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\nkpca_features <- juice(kpca_model, matches(\"PC\"))\n\n## Predicting the test data\nprep_test <- bake(kpca_model, test)\n\n# Model fitted to the 2 components\nkpc_df <- cbind(kpca_features[, 1:2], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(kpca_features)[1:2], \"Direction\"))\n\nkpc_glm <- glm(factor(Direction) ~ ., data = kpc_df, family = \"binomial\")\nkpca_glm_prob <- predict(kpc_glm, type = \"response\")\n\n# predictions\nkpca_prob_test <- predict(kpc_glm, prep_test, type = \"response\")\nkpca_prob_train <- predict(kpc_glm, kpca_features, type = \"response\")\nkpca_pred_train <- ifelse(kpca_prob_train > 0.49820248, \"Up\", \"Down\")\nkpca_pred_test <- ifelse(kpca_prob_test > 0.49820248, \"Up\", \"Down\")\n```\n\nIn this section, the Kernel principal components analysis model is fitted using 30 components and the cross validation results are shown below:\n\n```{r ckpca2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nkpca_eigen <- read.csv(\"data/glm_kpca_eigen_stock.csv\")\n\n# plotting\nk1 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = component_contribution))+\n  geom_point(aes(x = (component), y = component_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal()+\n  scientific_theme\n\nk2 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = group_contribution))+\n  geom_point(aes(x = (component), y = group_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal()+\n  scientific_theme\n\nk3 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\nk4 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(k1, k2, k3, k4, nrow = 2)\n```\n\n```{r ckpca3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Kernel PCA is applied to the dataset, and the first two principal components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.7908\"\n#| fig-width: 5\n#| fig-height: 10\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\npp1 <- kpca_model$template |>\n  ggplot()+\n  geom_point(aes(x = kPC01, y = kPC02, col = Direction))+\n  labs(title = \"Kernel Principal Components Analysis\",\n       x = \"kPC-01\", y = \"kPC-02\")+\n  theme_minimal()+\n  scientific_theme\n\npp2 <- roc(response = train[,\"Direction\"], predictor = kpca_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: kPCA\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(pp1, pp2, nrow = 2)\n```\n\nFrom the above charts, the first four components explain maximal variability in the predictor space. Cross validation on the training set indicate that, only the first two or five components give the best model in terms of Overall accuracy and Kappa. Hence for the purpose of model fitting, we will only use two components^[This is because for the 5-component and 2-component model,there is no big difference, hence we fit a model using 2 components only to ensure parsimonity].\n\n\n## Independent Components Analysis\n\n```{r cica1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\n\nica_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_ica(\n    all_of(cn_updated), \n    num_comp = 30,\n    id = 'ica')\n\nica_model <- \n  ica_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\nica_features <- juice(ica_model, matches(\"IC\"))\n\n# Predicting the test data\nprep_test <- bake(ica_model, test)\n\n# Model fitted to the 2 components\nica_df <- cbind(ica_features[, 1:15], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(ica_features)[1:15], \"Direction\"))\n\nica_glm <- glm(factor(Direction) ~ ., data = ica_df, family = \"binomial\")\nica_glm_prob <- predict(ica_glm, type = \"response\")\n\n# predictions\nica_prob_test <- predict(ica_glm, prep_test, type = \"response\")\nica_prob_train <- predict(ica_glm, ica_features, type = \"response\")\nica_pred_train <- ifelse(ica_prob_train > 3.813941e-01, \"Up\", \"Down\")\nica_pred_test <- ifelse(ica_prob_test > 3.813941e-01, \"Up\", \"Down\")\n```\n\n\nThis section covers the application of Independent Components Analysis to the classification dataset. We restrict the number of independent Components to 30 components. \n\n```{r cica2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\nica_train_res <- read.csv(\"data/glm_ica_eigen_stock.csv\")\n# plotting\ni1 <- ica_train_res |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- ica_train_res |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 1)\n```\n\n```{r cica3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"ICA is applied to the dataset, and the first two Independent components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.7898\"\n#| fig-height: 10\n#| fig-width: 5\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\ni1 <- ica_model$template |>\n  ggplot()+\n  geom_point(aes(x = IC01, y = IC02, col = Direction))+\n  labs(title = \"Independent Components Analysis\",\n       x = \"IC-01\", y = \"IC-02\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- roc(response = train[,\"Direction\"], predictor = ica_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: ICA\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 2)\n```\n\n\nFrom the charts above, the highest overall accuracy and Kappa are obtained when using 15 independent components, although as compared to the cross validation performance of the other models above, the ICA under-performs all models. We proceed to fit a GLM using the first 15 components.\n\n---\n\n## Comparison of Models\n\nIn this section, we compare all fitted models, on the test dataset. For comparison, we use the Overall Accuracy, although other metrics of classification models are quoted. For the cutoff probability, we select the cutoff which gave the highest Youden statistic on the training data.\n\n```{r comp1}\n#| cache: true\n#| column: margin\n#| fig-width: 5\n#| fig-height: 5\n#| fig-cap: \"The Receiver Operating characteristics for the models fitted on the training dataset\"\n\n# multiple ROCs\nsens_fun <- function(actual, predicted, cutoff)\n{\n  s <- vector()\n  for (i in 1:length(cutoff))\n  {\n    s[i] <- ModelMetrics::sensitivity(actual = actual,\n                                      predicted = predicted,\n                                      cutoff = cutoff[i])\n  }\n  return(s)\n}\n\nspec_fun <- function(actual, predicted, cutoff)\n{\n  s <- vector()\n  for (i in 1:length(cutoff))\n  {\n    pred_class <- ifelse(predicted > cutoff[i], \"Up\", \"Down\") |>\n      factor(levels = levels(actual))\n    s[i] <- spec_vec(actual,\n                     pred_class)\n  }\n  return(s)\n}\n\nroc_df <- data.frame(\n  thresh = seq(from = 0, to = 1, length = 200)) |>\n  mutate(\n    ridge_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ridge_prob_train),\n                                 cutoff = thresh),\n    lasso_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(lasso_prob_train),\n                                 cutoff = thresh),\n    elnet_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(elnet_prob_train),\n                                 cutoff = thresh),\n    pca_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(pca_prob_train),\n                                 cutoff = thresh),\n    kpca_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(kpca_prob_train),\n                                 cutoff = thresh),\n    ica_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ica_prob_train),\n                                 cutoff = thresh)\n  ) |>\n  mutate(\n    ridge_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ridge_prob_train),\n                                 cutoff = thresh),\n    lasso_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(lasso_prob_train),\n                                 cutoff = thresh),\n    elnet_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(elnet_prob_train),\n                                 cutoff = thresh),\n    pca_specificity = spec_fun(actual = factor(y[train_rows,]),\n                               predicted = as.numeric(pca_prob_train),\n                               cutoff = thresh),\n    kpca_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                predicted = as.numeric(kpca_prob_train),\n                                cutoff = thresh),\n    ica_specificity = spec_fun(actual = factor(y[train_rows,]),\n                               predicted = as.numeric(ica_prob_train),\n                               cutoff = thresh)\n  )\n\nView(roc_df)\n\nroc_df |>\n  ggplot()+\n  geom_line(aes(x = ridge_specificity, y = ridge_sensitivity, colour = \"Ridge\"))+\n  geom_line(aes(x = lasso_specificity, y = lasso_sensitivity, colour = \"LASSO\"))+\n  geom_line(aes(x = elnet_specificity, y = elnet_sensitivity, colour = \"Elastic-Net\"))+\n  geom_line(aes(x = pca_specificity, y = pca_sensitivity, colour = \"PCA\"))+\n  geom_line(aes(x = kpca_specificity, y = kpca_sensitivity, colour = \"k-PCA\"))+\n  geom_line(aes(x = ica_specificity, y = ica_sensitivity, colour = \"ICA\"))+\n  scale_x_reverse()+\n  scale_y_reverse()+\n  labs(title = \"ROC Comparison\", x = \"Specificity\", y = \"Sensitivity\")+\n  theme_minimal()+\n  scientific_theme\n```\n\n```{r comp2}\n# prediction on the training data\ntrain_accuracy <- data.frame(\n  ridge_cv_pred = ridge_pred_train,\n  lasso_cv_pred = lasso_pred_train,\n  mixture_pred_train <- elnet_pred_train,\n  pcr_pred = pca_pred_train,\n  kpca_pred = kpca_pred_train,\n  ica_pred = ica_pred_train,\n  actual = y[train_rows, ]\n) |>\n  mutate(\n    across(\n      .cols = where(is.character),\n      .fns = factor\n    )\n  )\n\ntest_accuracy <- data.frame(\n  ridge_cv_pred = ridge_pred_test,\n  lasso_cv_pred = lasso_pred_test,\n  mixture_pred_train <- elnet_pred_test,\n  pcr_pred = pca_pred_test,\n  kpca_pred = kpca_pred_test,\n  ica_pred = ica_pred_test,\n  actual = y[-train_rows, ]\n) |>\n  mutate(\n    across(\n      .cols = where(is.character),\n      .fns = factor,\n      levels = c(\"Down\", \"Up\")\n    )\n  )\n\ntrain_metric_df <- test_metric_df <- matrix(NA, nrow = 6, ncol = 14)\nfor (i in 1:(ncol(test_accuracy) - 1))\n{\n  cc_train <- caret::confusionMatrix(data = train_accuracy[, i],\n                                     reference = train_accuracy[, 7])\n  \n  train_metric_df[i, 2:14] <- c(as.numeric(cc_train$overall)[1:2],\n                                as.numeric(cc_train$byClass))\n  \n  cc_test <- caret::confusionMatrix(data = test_accuracy[, i],\n                                     reference = test_accuracy[, 7])\n  \n  test_metric_df[i, 2:14] <- c(as.numeric(cc_test$overall)[1:2],\n                               as.numeric(cc_test$byClass))\n}\n\ntrain_metric_df <- train_metric_df[, 1:10]\ntest_metric_df <- test_metric_df[, 1:10]\n\ntrain_metric_df <- train_metric_df |>\n  data.frame() |>\n  setNames(c(\"Model\", \"Accuracy\", \"Kappa\", \"Sensitivity\", \"Specificity\", \"PPV\", \"NPV\", \"Precision\", \"Recall\", \"F1\"))\n\ntest_metric_df <- test_metric_df |>\n  data.frame() |>\n  setNames(c(\"Model\", \"Accuracy\", \"Kappa\", \"Sensitivity\", \"Specificity\", \"PPV\", \"NPV\", \"Precision\", \"Recall\", \"F1\"))\n\ntest_metric_df$Model <- c(\"Ridge\", \"LASSO\", \"Elastic-Net\", \"PCA\", \"k-PCA\", \"ICA\")\ntrain_metric_df$Model <- c(\"Ridge\", \"LASSO\", \"Elastic-Net\", \"PCA\", \"k-PCA\", \"ICA\")\n\ntrain_metric_df <- train_metric_df[, c(1:7, 10)]\ntest_metric_df <- test_metric_df[, c(1:7, 10)]\n```\n\n```{r comp3}\n#| cache: true\nt1 <- train_metric_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(Model, Accuracy), y = Accuracy))+\n  scale_y_continuous(labels = percent_format())+\n  labs(x = \"Model\", y=\"Overall Accuracy\",\n       subtitle = \"Training set performance\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\n\nt2 <- test_metric_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(Model, Accuracy), y = Accuracy))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Test set performance\", x = \"Model\", y = \"Overall Accuracy\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\ngrid.arrange(t1, t2, nrow = 1)\n```\n\nThe training set performance metrics are displayed below:\n\n```{r comp4}\n#| fig-width: 12\n#| fig-height: 6\n#| cache: true\n#| fig-cap: \"Performance of Models on the training set\"\n\nkk_train <- knitr::kable(train_metric_df)\nkable_classic(\n  kable_input = kk_train,\n  full_width=F,\n  position=\"left\")\n\n```\n\n---\n\nThe testing set performance metrics are displayed below:\n\n```{r comp5}\n#| fig-width: 12\n#| fig-height: 6\n#| cache: true\n#| fig-cap: \"Performance of Models on the testing set\"\nkk_test <- knitr::kable(test_metric_df)\nkable_classic(\n  kable_input = kk_test,\n  full_width=F,\n  position=\"left\")\n\n```\n\n---\n\nFrom the statistics and charts above, it is evident that Kernel PCA outperforms all other models on the testing set, with an overall accuracy of 81.25%, with all other models having accuracy below 80%.\n\nThe good performance exhibited by Kernel PCA over PCA, shows that there were some non-linear relationships within the predictors.\n\n\n# Conclusion\n\nThis study compares models for high dimensional data both in the regression and classification setting. The results show that, for regression: The elastic-net regression model, and Kernel-PCA outperform the rest in terms of Mean Squared Error. For the classification models fitted, the Kernel-PCA and PCA outperform the rest of the models. The consistency of the Kernel PCA in both settings shows that the dataset contained non-linear dependencies in the predictor space - which Kernel-PCA is good at uncovering.\n\nFor both settings, the dimensionality reduction models used including: PCA, k-PCA, and ICA, performed well in reducing the multi-collinearity inherent in the original dataset,and all the dimensionality reduction models show optimal performance with relatively few components used in the model - which helps in pointing out how important the dimensionality reduction models are at combating multi-collinearity in the data.\n\nIn both settings, the hyper-parameters for the final models fitted, such as: $\\alpha, \\lambda$ for the ridge, LASSO and Elastic-Net models, and $p$, the number of components to use for the dimensionality reduction models, were obtained through cross-validation on the training set. Since most models maintained consistency in both training and testing performance, then it shows that cross-validation is useful in determining good hyper-parameter estimates, for model fitting.\n\n# Recommendations\n\nThis article only focuses on a single dataset from Financial domain, where we are interested in predicting the returns, or direction a portfolio of assets would generate at a future time, using historical data of technical, fundamental, and statistical metrics.\n\nFuture research could look into utilizing these models for high-dimensional data from other domains such as health-care, marketing, etc.\n\nFuture research could look into other dimensionality reduction models not utilized in this article, such as Non-Negative Matrix Factorization.^[This research did not cover NNMF, due to computational constraints]\n\nFuture research could look into the importance of these dimensionality reduction models, in the context of clustering, and other Machine Learning models not utilized in this study.\n\n# References\n\nBishop, C. (2011). Pattern Recognition and Machine Learning. Springer.\n\nG. James et al. (2013). An Introduction to Statistical Learning: with Applications in R. Springer Texts in Statistics.\n\nHyvärinen, A., & Oja, E. (2000). Independent component analysis: Algorithms and applications. Neural Networks, 13(4-5), 411-430.\n\nKuhn, M., & Johnson, K. (2013). Applied Predictive Modeling. Springer.\n\nMacKay, D. (2003). Information Theory, Inference and Learning Algorithms. Cambridge University Press.\n\nWickham, H., & Grolemund, G. (2016). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc.\n\n---\n\nAbdi, H., & Williams, L. (2010). Principal component analysis. Wiley Interdisciplinary Reviews: Computational Statistics, 2(4), 433-459.\n\nAltman, D., & Bland, J. (1994). Diagnostic tests 3: Receiver operating characteristic plots. BMJ: British Medical Journal, 309(6948), 188.\n\nBarker, M., & Rayens, W. (2003). Partial least squares for discrimination. Journal of Chemometrics, 17(3), 166-173.\n\nCaputo, B., Sim, K., Furesjo, F., & Smola, A. (2002). Appearance-based object recognition using SVMs: Which kernel should I use? In Proceedings of NIPS Workshop on Statistical Methods for Computational Experiments in Visual Processing and Computer Vision, volume 2002.\n\nFriedman, J., Tibshirani, R., & Hastie, T. (2010). Regularization paths for generalized linear models via coordinate descent. Journal of Statistical Software, 33(1), 1-22. doi:10.18637/jss.v033.i01 https://doi.org/10.18637/jss.v033.i01.\n\nKuhn, M. (2008). Building predictive models in R using the caret package. Journal of Statistical Software, 28(5), 1-26. doi:10.18637/jss.v028.i05 https://doi.org/10.18637/jss.v028.i05.\n\nTay, J. K., Narasimhan, B., & Hastie, T. (2023). Elastic net regularization paths for all generalized linear models. Journal of Statistical Software, 106(1), 1-31. doi:10.18637/jss.v106.i01 https://doi.org/10.18637/jss.v106.i01.\n\n---\n\nKaratzoglou, A., Smola, A., & Hornik, K. (2023). kernlab: Kernel-Based Machine Learning Lab. R package version 0.9-32, https://CRAN.R-project.org/package=kernlab.\n\nKaratzoglou, A., Smola, A., Hornik, K., & Zeileis, A. (2004). kernlab - An S4 package for kernel methods in R. Journal of Statistical Software, 11(9), 1-20. doi:10.18637/jss.v011.i09 https://doi.org/10.18637/jss.v011.i09.\n\nLiland, K., Mevik, B., & Wehrens, R. (2023). pls: Partial Least Squares and Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls.\n\nKuhn, M. (2008). The caret package. Journal of Statistical Software, 28(5), 1-26. doi:10.18637/jss.v028.i05 https://doi.org/10.18637/jss.v028.i05.\n\nKuhn, M., Wickham, H., & Hvitfeldt, E. (2024). recipes: Preprocessing and Feature Engineering Steps for Modeling. R package version 1.0.10, https://CRAN.R-project.org/package=recipes.\n\nMarchini, J. L., Heaton, C., & Ripley, B. D. (2023). fastICA: FastICA Algorithms to Perform ICA and Projection Pursuit. R package version 1.2-4, https://CRAN.R-project.org/package=fastICA.\n\nPeterson, B. G., & Carl, P. (2020). PerformanceAnalytics: Econometric Tools for Performance and Risk Analysis. R package version 2.0.4, https://CRAN.R-project.org/package=PerformanceAnalytics.\n\nR Core Team (2023). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/.\n","srcMarkdownNoYaml":"\n\n```{r, echo=F, warning=F, message=F}\n# originally:       margin-width: 350px\n\nknitr::opts_chunk$set(echo=FALSE)\nknitr::opts_chunk$set(warning=FALSE)\nknitr::opts_chunk$set(message=FALSE)\n\n# sourcing for functions and global data\nsource(\"rfiles/Global-1.R\")\nsource(\"rfiles/Global-2.R\")\n\nlibrary(pacman)\np_load(dplyr, ggplot2, sf, stringr, purrr, gridExtra, gghighlight, ModelMetrics)\n\nscientific_theme <- theme(\n  # Text elements\n  text = element_text(family = \"serif\", color = \"black\"),\n  plot.title = element_text(size = 12, face = \"plain\", hjust = 0.5),\n  axis.title = element_text(size = 12, face = \"plain\"),\n  axis.text = element_text(size = 12),\n  axis.text.x = element_text(angle = 0, hjust = 0.5),\n  axis.text.y = element_text(angle = 0, hjust = 1),\n  legend.title = element_text(size = 12),\n  legend.text = element_text(size = 12),\n  \n  # Plot background and grid\n  panel.background = element_rect(fill = \"white\"),\n  panel.grid = element_blank(),\n  \n  # Axis lines and ticks\n  axis.line = element_line(color = \"black\"),\n  axis.ticks = element_line(color = \"black\"),\n  \n  # Remove the right and top axis lines (bty=\"l\" equivalent)\n  axis.line.y.right = element_blank(),\n  axis.line.x.top = element_blank(),\n  \n  # Legend\n  legend.background = element_rect(fill = \"white\"),\n  legend.key = element_rect(fill = \"white\", color = NA),\n  \n  # Plot margins (approximating mar = c(5, 5, 3, 5))\n  plot.margin = margin(t = 3, r = 5, b = 5, l = 5, unit = \"pt\"),\n  \n  # Expand axes to touch the data (xaxs=\"i\", yaxs=\"i\" equivalent)\n  panel.spacing = unit(0, \"lines\"),\n  plot.title.position = \"plot\"\n)\n```\n\n\n# Introduction\n\nHigh-dimensional data is the type of data^[Also known as wide data] which is characterized by the presence of many variables^[potentially where the number of variables(p) is greater than the number of observations in the sample(n) i.e. $p > n$.]. Due to the growing nature of variables of interest and data collection over the past years in diverse domains such as health-care/medicine, marketing, finance etc., there is an increasing need for techniques which are able to thrive in situations where the number of variables is higher, and at times even more than the number of data points available to train the model.^[For most Machine Learning algorithms, data at hand is usually of the form $n >> p$, i.e. the number of data points(n) used in training the model is far higher than the  number of predictors(p) in the data. However for high dimensional Machine Learning, the number of predictors(p) is usually very large, and at times more than the sample size(n), which poses a problem for most Machine Learning models.]\n\nExamples of problems common in high dimensional learning include the following:\n\nPredicting consumer behavior and patterns in online-shopping stores, where the variables of interest, could be all search terms entered by the consumer, the click history, previous purchases and declines, demographic characteristics, and search account history. In such a problem, while the number of predictors for online behavior are many, we typically only have a few customer information.\n\n\nSignal generation, and price prediction in finance. In this domain, the variables of interest are usually: technical indicators of the price series such as the moving averages, volatility, etc, the fundamental indicators such as market capitalization and several accounting ratios, analyst ratings, social media sentiment etc. In this domain too, the number of historical data points used to train models is often limited^[at least not for high-frequency trading domain], however the number of predictors keeps growing.\n\n\nIn medicine, a problem of interest is to predict whether given tumors are benign or malignant, where variables would include a number of characteristics of cells e.g. perimeter, concavity, area, smoothness etc and other variables about the patient such as patient's demographic characteristics, lifestyle characteristics etc. The characteristics could be so many, yet the number of patients, for which we have data could be few due to patients leaving studies/treatment.\n\n---\n\nThe challenges associated with learning in high dimensions, require specialized techniques suited to such data since common statistical learning methods such as least squares fail in such dimensions. Potential dangers encountered when working with high-dimensional data include:\n\n1. Multi-collinearity: In the presence of a high number of predictors, the possibility of more than one pair of predictors being highly correlated increases, and this poses a challenge termed multi-collinearity in the data.^[Multi-collinearity refers to situations in which there are several predictors which are significantly correlated] Several machine learning models become unstable in the presence of multi-collinearity such as Neural networks, support vector machines etc, while some of them may break down completely such as multiple linear regression. Multi-collinearity introduces redundancy in model fitting, since two or more predictors attempt to explain the same variability in the response.\n\n\n2. False positive discoveries: In high dimension data, the probability of finding one or more predictors which are significantly related to the response due to random chance and not due to a true relationship increases, which leads to the problem of false discoveries. Such false positive findings often decrease a model's performance and hurt model interpretability.\n\n```{r, echo=F}\n#| fig-cap: \"An example of a dataset with two predictors, and two observations. (n = p = 2)\"\n#| column: margin\n#| message: false\n#| fig-height: 5\n#| fig-width: 5\n#| fig-show: \"hold\"\n#| cache: true\n\ndd <- data.frame(x = c(2, 5.5), y = c(4, 11))\nplot(dd$x, dd$y, pch = 20, xlim = c(0, 7), ylim = c(0, 15),\n     main = NULL, xlab = \"Predictor\", ylab = \"Response\")\nabline(lm(y~x, data = dd), col='blue')\n```\n\n```{r, echo=F}\n#| fig-cap: \"An example of a dataset with (n = p = 9) using polynomial regression (degree 9)\"\n#| column: margin\n#| message: false\n#| fig-height: 5\n#| fig-width: 5\n#| fig-show: \"hold\"\n#| cache: true\n\nx <- seq(0,1, length = 10)\nset.seed(226)\ny <- sin(2*pi*x) + rnorm(n = 10, mean = 0, sd = 1)\nplot(x, y, type=\"p\", pch=20, ylim=c(-5, 7),\n     xlab = \"Predictor\", ylab = \"Response\")\npmd = polyreg(x, y, order=9)\nyhat <- plot_poly(pmd, x, c = \"red\")\n```\n\n\n3. Over-fitting: In high dimensional data, where $n = p$ or $n > p$, then over-fitting is likely to occur. In this scenario, the models fitted have n degrees of freedom. This is illustrated in the following example: Suppose we have a sample of 2 data points, and one variable of interest(together with an intercept) i.e. $n = p$, then fitting a linear regression model results in a perfect fit (all residuals become 0), however such a model may fail to generalize to previously unseen data(test data). This shows that in high dimensional learning, it is possible for models to perfectly fit the training data, and perform poorly in previously unseen data. In such cases, the training error is a poor approximation of test error rate. \n\n\n4. Common performance metrics for models also fail in the high dimensional case, such as the $R^2, Adjusted-R^2$ etc. This is because, for metrics such as $R^2$, increasing the number of variables (p) in the model, almost always increases the $R^2$ even when the variables have no significant relation to the response^[An example of an illustration showing what happens to a model when more variables which have no significant relationships to the response are added to the model. It is evident how adjusted R-squared almost always increases as the number of predictors increases, the training error always decreases as more predictors are added to a model due to possible over-fitting, but the test error increases, since the increased number of predictors add no predictive power to the model.]. Consequently, possible collinearity among the predictors causes the tests of significance in models to be biased.\n\n```{r f3}\n#| fig-width: 12\n#| fig-height: 5\n#| cache: true\n#| fig-show: \"hold\"\n\nset.seed(62)\ndd <- matrix(rexp(4000), ncol = 25) |>\n  data.frame()\ntrain_dd <- dd[1:100, ]\ntest_dd <- dd[101:160, ]\n\ntrain_mse <- test_mse <- adj_rsq <- vector()\nfor (i in 2:ncol(dd))\n{\n  temp_train <- data.frame(\n    cbind(train_dd[, 1], train_dd[, 2:i])\n  ) |>\n    setNames(str_c(\"X\", 1:i))\n  \n  temp_model <- lm(X1 ~ ., data = temp_train)\n  sm <- summary.lm(temp_model)\n  train_pred <- predict(temp_model)\n  test_pred <- predict(temp_model, test_dd)\n  \n  train_mse[i] <- mse(train_dd$X1, train_pred)\n  test_mse[i] <- mse(test_dd$X1, test_pred)\n  adj_rsq[i] <- sm$adj.r.squared\n}\n\npar(mfrow = c(1,3))\nplot(adj_rsq, type = 'o', pch = 20, main = \"Adjusted R-squared\",\n     xlab = \"# of predictors\", ylab = \"\")\nplot(train_mse, type = 'o', pch = 20, main = \"Train MSE\",\n     xlab = \"# of predictors\", ylab = \"\")\nplot(test_mse, type = 'o', pch = 20, main = \"Test MSE\",\n     xlab = \"# of predictors\", ylab = \"\")\n```\n\n# Models for high-dimensional data\n\nDue to the above-mentioned challenges, this study seeks to investigate models suitable for high-dimensional learning in the context of regression and classification.\n\nIn modelling high-dimensional data, it is of interest to identify variables and interactions which have a significant relationship to the response variable, and discard those which have no significant relationship. This leads to dropping some variables in the analysis in favor of others *(by setting their coefficients in the model to $0$)*, a technique commonly called **feature/variable selection**, or shrinking their coefficients in the model towards $0$, a technique termed **shrinkage.** In this study, the models used for shrinkage and variable selection are the Ridge and LASSO regression respectively. Both ridge and LASSO regression are commonly called *Penalized regression models* and are also referred to as regularization techniques since they control for possible over-fitting in models.\n\nDue to the 'wide' nature of data in high-dimensional settings, it is of interest to an analyst, to find a small subset of predictors, which have the most significance relation to the response. This can be achieved by transformations for reducing the dimensionality of the predictor space into a much smaller dimension, a technique known as: **dimensionality reduction**. The aim of the these methods is to find a subset of predictors, from the original predictor space, in such a manner that the high-dimensional problem is reduced to a low-dimensional one. It is important to note that: since the subset of predictors is constructed in such a way, that there is no correlation among the new subset of predictors, the issue of multi-collinearity is also solved. In this study we investigate the following dimensionality reduction techniques: Principle Components analysis, Kernel Principal Components analysis, Independent component analysis, and Partial least squares.\n\n---  \n\n# Penalized regression methods\n\n## Ridge regression\n\nThis is a shrinkage based method for regression (suitable for $p > n$ data), which aims to supplement the Ordinary Least Squares method, especially in the context of high multi-collinearity.\n\nRecall, that for the orindary least squares model of the form:\n\n$$y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_p x_p + \\epsilon_t$$\n\nThe error function is of the form:\n\n$$Q = \\sum{(y_i - \\hat{y_i})^2}$$\n$$where: \\hat{y_i} = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_p x_p$$\n\nIn slving for the coefficients of regression, we obtain the following closed-form solution:\n\n$$\\beta = (X^T X)^{-1} (X^T Y)$$\n\nHowever, in the prescence of many predictors, there is the ever-present risk of multi-collinearity, and thus the $(X^T X)$ matrix will not be of full rank, and hence not invertible. This in turn makes the coefficients of the regression model to grow large and unstable.\n\nA work around is to change the error function of the regression model to be:\n\n$$Q_{L2} = \\sum{(y_i - \\hat{y_i})^2} + \\lambda_r \\sum{\\beta^2_j}$$\n\nThis choice of error function, has the advantage that the error function remains a quadratic function of the regression coefficients, and its exact closed-form solution can be obtained by equating the gradient of the error function to $0$, and solving for $\\beta$ to obtain:\n\n$$\\beta = (X^T X + \\lambda I)^{-1} (X^T Y)$$\n\nThe $\\lambda$ is called a penalty term or regularization coefficient, and this technique is called **ridge regression**. The penalty term must increase when the coefficients grow large, in order to enforce minimization. In result, the penalty causes the regression coefficients to become smaller and shrink towards 0, this makes the model much interpretable.\n\nThis particular choice of regularizer is known as *weight decay* in machine learning, or *parameter shrinkage* in statistics, since it has the tendancy to shrink parameter values towards 0\n\n## LASSO regression\n\nA different choice of the regularizer could be obtained using the following error function:\n\n$$Q_{L1} = \\sum{(y_i - \\hat{y_i})^2} + \\lambda_L \\sum{|\\beta_j|}$$\n\nThis method is called: *Least absolute shrinkage and selection operator*: **(LASSO)**. In modifying the error function to include the regularizer, lasso regression forces some regression coefficients to be 0, and in doing so, it practically selects model terms to an optimal number of predictors. This makes it a feature selection model.\n\nThe advantage of the LASSO regression over ridge regression is that: although ridge regression shrinks parameter estimates towards 0, it does not lead to any parameter estimates being 0, hence for the ridge regression, all (p) predictors are included in the model *(which might hurt model interpretability)*. However, for the LASSO regression, the nature of its regularizer ensures that some parameter estimates are set to 0, hence effectively eliminating them from the model. Hence the LASSO regression has he advantage of producing simpler interpretable models than ridge regression. It should be noted however that this does not hurt the predictive ability of the ridge regression model.\n\n## Elastic-Net Regression (Combining Ridge and LASSO regression)\n\nSince ridge regression has the advantage of combating multi-collinearity, and the LASSO regression has the advantage of being a feature/variable selection model, the two models can be combined, in order to deal with both multi-collinearity, and feature selection at once. \n\nThe form of the error function of model is shown below:\n\n$$Q = \\sum{(y_i - \\hat{y_i})^2} + \\lambda [ (1 - \\alpha)\\sum{\\beta^2_j} + \\alpha \\sum{| \\beta_j |} ]$$\n\nHere, $\\lambda = \\lambda_r + \\lambda_L$ , and the proportion of $\\lambda$ associated with the lasso is denoted $\\alpha$. Thus, selecting $\\alpha = 1$ would be a full lasso penalty model, selecting $\\alpha = 0$ would be a full ridge regression model, whereas $\\alpha = 0.5$ is an even  mix of a ridge and lasso model.\n\n## Search for optimal $\\lambda$ \n\nThe optimal value of $\\lambda$ for the ridge and LASSO regression model is found by means of cross-validation, where several choices of $\\lambda$ are used on the training set, and the performance of the models are evaluated on a validation set,so that the value of $\\lambda$ which yields the least training error, is preferred. For Elastic-Net regression, a common method of selecting the best regularization coefficient, is to construct a grid of $\\alpha$ values, and for each value of $\\alpha$, the best regularization coefficient $\\lambda$ is found. The fitted models are then compared based on validation error.\n\n---\n\n# Dimensionality Reduction methods\n\nDimensionality reduction methods are useful in reducing the dimensionality of datasets, from a high-dimensional space to a low dimensional space, for a number of reasons:\n\n- High-dimensional data increases computation time in model fitting\n\n- High-dimensional data is often plagued with highly correlated variables.\n\nThese challenges above necessitate, finding only a small subset of predictors which summarize maximal variability in the original predictor space significantly. Such methods include:\n\n1. Principal Components Analysis (PCA)\n\n2. Kernel Principal Components Analysis (K-PCA)\n\n3. Independent Component Analysis (ICA)\n\n4. Partial Least Squares (PLS)\n\n5. Non-negative matrix factorization (NNMF)\n\nAll the techniques listed above work by taking an input matrix $X$, which is an $n * p$ matrix, and return a matrix of scores *(often called components)*, which are combinations of the columns of the original data matrix.\n\nIt is however important to note that $PCA, K-PCA, ICA, NNMF$ are *unsupervised* techniques, and their aim is to reduce the number of predictors into a subspace of predictors, with the hope that the new subset of predictors will be significant in explaining the variability in the response, although this is not always the case. Their aim is to reduce the predictor space into a smaller subset with the aim of reducing computation time and possible multi-collinearity, but not necessarily improve predictive performance.\n\nThe $PLS$ technique is a *supervised* technique, in that it performs dimensionality reduction, while ensuring that the subset of predictors obtained is significantly related to the response variable. Thus, when using PLS, there is some guarantee of improving predictive performance, while reducing computation time in model fitting.\n\nIn this article, we will not cover the non-negative matrix factorization method.\n\n## Principal Components Analysis\n\n::: column-margin\nRecall that, for a data matrix A, and an identity matrix I, the eigen values are $\\lambda$ such that:\n$$|A - \\lambda I| = 0$$\nThe corresponding eigen vector $\\hat{v}$, of an eigen value $\\lambda$ satisfies the equation:\n$$(A - \\lambda I) \\hat{v} = 0$$\n:::\n\nPrincipal Components Analysis (PCA) is the most popular dimensionality reduction method. The aim of PCA is to find a subset of predictors, which is esentially a linear combination of the original predictor space, such that the combinations explain maximal variability of the original predictor space.\n\nIn PCA, the new features formed^[Often called scores or components], are usually orthogonal to each other^[Implying they're uncorrelated, and thus there is minimal overlap in the information provided by each score].  This makes it a very useful tool in dealing with multi-collinearity.\n\nWe consider an $n*p$ centered data matrix $X$, where n is the number of observations, and p is the number of predictors. We then create a $p*p$ matrix, whose columns are eigen vectors of $(X^T X)$. \n\nThe matrix $W$ is the matrix of unit eigen vectors. In constructing $W$, we usually ensure that eigen vectors are ranked by the highest eigen value i.e. components with the highest explanatory power come first. It follows that $W$ is orthogonal, i.e. $W^T = W^{-1}$\n\nThe principal components decomposition $P$ of $X$ is then defined as: $P= XW$\n\nA popular application of principal components analysis is *principal components regression*, where the predictor matrix is first reduced into a matrix of scores using PCA, and this matrix of scores is then fed into regression.\n\n## Kernel Principal Components Analysis\n\nRecall that PCA is useful in forming component by extracting linear combinations of predictors from the original predictor space, hence it is useful only when there are linear patterns in the predictor space.\n\nBut supposing that, the functional form of the data at hand is given by the following equation below:\n\n$$y = x_1 + x_2 + x_1^2 + x_2^2 + \\epsilon_t$$\n\nThen, using PCA will only construct linear combinations of $x_1$ and $x_2$, thus missing out the important quadratic relationships in the data.\n\nThus in the presence of possible non-linear relationships in the data, Kernel-PCA is better suited.\n\nK-PCA extends PCA using kernel methods, so that for linear combinations of variables, K-PCA captures this using the linear kernel:\n\n$$k(x_1, x_2) = x_1^Tx_2$$\n\nAlthough the linear kernel could be substituted using any other kernel of choice, such as the polynomial kernel:\n\n$$k(x_1, x_2) = <x_1, x_2>^d$$\nso that for quadratic relationships, we set $d = 2$:\n\n$$k(x_1, x_2) = <x_1, x_2>^2 = (x_{11}x_{12} + ... + x_{n1}x_{n2})^2 $$\n\n\n## Independent Components Analysis\n\nRecall, PCA forms scores using linear combinations of the original predictor space such that the new scores formed are orthogonal with each other, and thus uncorrelated, however this does not mean that the scores are statistically independent of each other.^[This is because in certain cases, the correlation could be 0, however the covariance could be indicating otherwise, except in cases where data comes from the gaussian distribution, where un-correlation implies independence.]\n\nICA bears some similarity with PCA^[It should however be noted that scores generated by ICA  are different from PCA scores], however in creating the scores, it does so in a way that the scores are statistically independent of each other. Generally, ICA tends to model a broader set of trends than PCA, which is only concerned with orthogonality.\n\nGiven a random observed vector $X$,whose elements are mixtures of independent elements of a random vector $S$ given by:^[Both $X$ and $S$ are vectors of length $m$]\n\n$$X = AS$$\n\nWhere $A$ denotes a mixing matrix of size $m*m$, the goal of ICA is to find the un-mixing matrix $W$^[An inverse of the mixing matrix $A$], that will give the best approximation of $S$ \n\n$$WX \\approx S$$\n\nICA makes the following assumptions about data:\n\n1. Statistical independence in the source signal\n\n2. Mixing matrix must be a square matrix of full rank.\n\n3. The only source of randomness is the vector $S$.\n\n4. The data at hand is centered and whitened.^[Centered data is data which has been *demeaned*, and whitening could be achieved by first running PCA on the original data and using the whole set of components as input data to ICA]\n\n5. The source signals must not have a gaussian distribution except for only one source signal.\n\nICA constructs scores based on two methods:\n\n- Minimization of mutual Information\n\nFor a pair of random variables $X, Y$, the mutual information is defined as follows:\n\n$$I(X;Y) = H(X) - H(X|Y)$$\nWhere:\n\n$H(X)$: is the entropy of $X$.\n\n$$H(X) = - \\sum_x{P(x)\\log{P(x)}}$$\n\n$H(X|Y)$: is the conditional entropy.^[The entropy of $X$ conditional on $Y$ taking a certain value $y$]\n\n$$H(X|Y) = H(X, Y) - H(Y)$$\n\nwhere:\n\n$H(X, Y)$: is the joint entropy given by:\n\n$$H(X, Y) = - \\sum_{x, y}{P(x, y) \\log{P(x, y)}}$$\n\nFrom the above equations, entropy can be seen as a measure of uncertainty of information in a random variable, so that the lower the value of entropy, the more information we have about the random variable of interest. Therefore by seeking for a method of maximizing mutual information, we would be seeking for components which are maximally independent.\n\n- Maximization of non-gaussianity.\n\nThis is a second method of constructing independent components. Since in the assumptions underlying ICA, is the assumption of non-gaussianity of the source signals, then, one way of extracting components is to maximize non-gaussianity of the components.^[Forcing the components to be as far as possible from the gaussian distribution].\n\nAn example of a non-gaussianity measure is the *Negentropy*, given by:\n\n$$N(X) = H(X^N) - H(X)$$\n\nWhere:\n\n$X$: is a random non-gaussian vector.\n\n$X^N$: is a gaussian random vector with same covariance matrix as $X$.\n\n$H(.)$: is the entropy.\n\nSice the gaussian distribution has the highest entropy for any given covariance matrix,then the negentropy: $N(X)$ is a strictly positive measure of non-gaussianity.\n\n## Partial Least Squares\n\nPartial Least Squares (PLS) is a *supervised* dimensionality reduction method, in that the response variable is used in guiding the dimensionality reduction process unlike in the context of PCA. Hence in constructing the components, PLS does so in a way that the components not only summarize maximal variability in the predictor space, but also are related to the response significantly.\n\nGiven $p$ predictors: $X_1, X_2, ... , X_p$, and the response variable $Y$, we construct linear combinations of our original predictors: $Z_1, ..., Z_m, \\hspace{2 mm} m < p$, components:\n\n$$Z_m = \\sum_{j=1}^p {\\phi_{jm} X_j}$$\n\nWhere: $\\phi_{jm}$: are some constants.\nIn computing the first PLS direction $Z_1$, PLS sets each $\\phi_{j1}$ equal to the coefficient from a simple linear regression of $Y$ onto $X_j$ ^[It can be shown that this coefficient is proportional to the correlation between $X_j$ and $Y$], hence it is evident that PLS places larger weight on variables which are highly correlated to the response variable.\nThe second PLS direction is first computed by taking the residuals after regression each variable on $Z_1$^[The residuals are interpreted as: amunt of information that has not been accounted for by the first PLS direction]. The second PLS direction: $Z_2$ is computed using the *orthogonalized* data in the same fashion as $Z_1$, and this procedure is repeated to obtain the $m$ PLS components.\n\n--- \n\n# Data\n\nThe data used in modelling is a financial dataset aimed at using various statistical and financial metrics to predict the return for quarterly returns data for a selected stock price series. The dataset is comprised of 78 numerical predictor variables(statistical and financial metrics), and a response variable^[The return for a particular quarter in the regression setting, and the Direction(i.e. whether there was a rise/drop in the quarterly return), in the classification setting]. The dataset is constructed using the metrics from the package `PerformanceAnalytics` in R, and using the return series of KCB Group from the period 1st January 2001, to 31st January 2021. The financial benchmarking metrics are computed using FTSE NSE 20^[A price weighted portfolio of 20 best performing counters in the Nairobi Securities Exchange as the benchmark] as the benchmark. The nature of the dataset makes it impossible to fit a standard Multiple Linear Regression model, or even a Generalized Linear Model(GLM) to the data (since $p(78) >> n(64)$, in the training dataset). A glimpse of the first 49 variables present in the data are shown below:^[Note that the variable *Direction*, which is the response variable in the classification setting is not included in the glimpse of the data. It is a binary variable constructed from the differenced Annualized Return variable, such that if the change in return is Negative, the Direction is *DOWN* indicating that the stock dropped in terms of quarterly returns, otherwise, the Direction is *UP*, indicating that the stock quarterly return rose, from the previous quarter.]\n\n```{r dataloading}\ngl <- cbind(t(head(fdf, 2)),\n            t(tail(fdf, 1))) |>\n  data.frame()\ngl[, 2] <- '...'\ncolnames(gl) <- c(rownames(fdf)[1], '...', rownames(fdf)[ncol(fdf)])\nkable(gl)\n```\n\nA chart of the correlation between the predictor variables is shown below:\n\n```{r corrplot}\n#| fig-width: 15\n#| fig-height: 15\n#| cache: true\n#| \n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(fdf[, -1]),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .7,\n                   tl.col = \"black\")\n```\n\nIt is evident that there exists (both positive and negative) high correlation between the predictors, which poses a challenge if multi-collinearity in the model fitting process. The high positive correlation  is visible in predictors which are related to measures of downside risk, while the high negative correlation is evident between variables which measure tail risk, and those which measure downside risk. There is little to no correlation between variables which measure central tendancy (mean and median returns, and their respective ratios) and the variables which measure the riskiness of the returns series.\n\nFor both models, the training and testing sets are constructed from the data using simple random sampling of the original data, so that 80% of the full dataset goes into training the models, while the remaining 20% of the data goes to the testing data. For the classification model, the resulting subsets are analyzed to ensure that there is class balance in the response variable.\n\nThe key reason we randomize the data, when splitting into training and testing set, is because, for the purpose of this analysis, we are not interested in the temporal structure of the data.\n\nIn the regression setting, the predictor variables are lagged by one time period, so that the financial metrics of of quarter $i-1$ are used in predicting the return for quarter $i$. In the classification setting, since the Direction variable is automatically lagged, we back-shift it, so that, the financial metrics of quarter $i-1$, are used in predicting the Direction of the next quarter $i$. This is necessary since, it helps us in mitigating look-ahead bias.\n\n---- \n\n# Models \n\n# Regression model (I)\n\n\n```{r regmodel1}\n# constructing the training and testing set\nset.seed(472)\ntrain_rows <- sample(.80*nrow(fdf))\ntrain <- fdf[train_rows, ]\ntest <- fdf[-train_rows, ]\n\n# constructing the model matrix\nx <- model.matrix(`Annualized Return` ~ ., data = fdf)[, -1]\ny <- as.matrix(fdf[, \"Annualized Return\"])\n```\n\n## Ridge Regression\n\n```{r ridge1}\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of ridge regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-height: 5\n#| fig-width: 5\n#| cache: true\n#| fig-show: \"hold\"\n#| column: margin\n\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"gaussian\",\n                    alpha = 0)\nplot(cv.out)\n# cv.out$lambda.min #> 12.75054\n```\n\nWe proceed to fit ridge regression on the data, and select the regularization parameter using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 12.75054]. The cross validation statistics are shown below:\n\n```{r ridge2}\n#| cache: true\n#| fig-width: 5\n#| fig-height: 5\n\n# fitting best model with cross-validation lambda\nridge_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"gaussian\",\n                        alpha = 0,\n                        lambda = cv.out$lambda.min)\n\n# fitting best model with gradient descent lambda\n# ridge_best_sgd <- glmnet(x = x[train_rows, ],\n#                         y = y[train_rows, ],\n#                         family = \"gaussian\",\n#                         alpha = 0,\n#                         lambda = 0.000383379039462451)\n\ncf_cv <- as.numeric(coef(ridge_best_cv))\n# cf_sgd <- as.numeric(coef(ridge_best_sgd))\n\nridge_coef_data <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n  #coef_sgd = cf_sgd\n)\n\nr1 <- ridge_coef_data |>\n  select(coef_cv) |>\n  unlist() |> as.numeric() |>\n  quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n  as.numeric() |> data.frame() |>\n  setNames(\"quantiles\") |>\n  mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n  ggplot()+\n    geom_line(aes(x = prob, y = quantiles)) +\n  scale_x_continuous(labels = scales::percent_format())+\n    labs(title = \"Distribution of model coefficients: (Ridge-CV)\",\n         x = \"Quantile Probability\", y= \"Coefficient value\")+\n    theme_minimal() + \n  scientific_theme\n# Majority (nearly 75%) of coefficients have very very small values\n\n# r2 <- ridge_coef_data |>\n#   select(coef_sgd) |>\n#   unlist() |> as.numeric() |>\n#   quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n#   as.numeric() |> data.frame() |>\n#   setNames(\"quantiles\") |>\n#   mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n#   ggplot()+\n#   geom_line(aes(x = prob, y = quantiles)) +\n#   scale_x_continuous(labels = scales::percent_format())+\n#   labs(title = \"Distribution of model coefficients: (Ridge-G)\",\n#        x = \"Quantile Probability\", y= \"Coefficient value\")+\n#   theme_minimal()\nr1\n#grid.arrange(r1, r2, nrow = 1)\n```\n\nThe model fitted using the regularization parameter obtained by cross validation *(Ridge CV)*, has roughly 70% of the model coefficients shrunken to be close to 0, showing how effective ridge regression is in producing interpretable models.\n\n\n## LASSO Regression\n\nWe proceed to fit LASSO regression on the data, and select the regularization parameter using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 0.1893415.]. The cross validation statistics are shown below:\n\n```{r lasso1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of LASSO regression and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"gaussian\",\n                    alpha = 1)\nplot(cv.out)\n# cv.out$lambda.min #> 12.75054\n```\n\n\n```{r lasso2}\n#| cache: true\n#| fig-width: 5\n#| fig-height: 5\nlasso_best_cv <- glmnet(x = x[train_rows, ],\n                     y = y[train_rows, ],\n                     family = \"gaussian\",\n                     lambda = 0.1893415,\n                     alpha = 1)\n\n# lasso_best_sgd <- glmnet(x = x[train_rows, ],\n#                         y = y[train_rows, ],\n#                         family = \"gaussian\",\n#                         lambda = 0.00275750934775019,\n#                         alpha = 1)\n\ncf_cv <- as.numeric(coef(lasso_best_cv))\n# cf_sgd <- as.numeric(coef(lasso_best_sgd))\n\nlasso_coef_data <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n  #coef_sgd = cf_sgd\n)\n\nl1 <- lasso_coef_data |>\n  select(coef_cv) |>\n  mutate(status = ifelse(coef_cv == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n  ggplot()+\n  geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n  labs(title = \"Distribution of model coefficients: (LASSO-CV)\",\n       x = \"Status\", y= \"Coefficient count\")+\n  theme_minimal() +\n  scientific_theme\n\n# l2 <- lasso_coef_data |>\n#   select(coef_sgd) |>\n#   mutate(status = ifelse(coef_sgd == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n#   ggplot()+\n#   geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n#   labs(title = \"Distribution of model coefficients: (LASSO-g)\",\n#        x = \"Status\", y= \"Coefficient count\")+\n#   theme_minimal()\nl1\n#grid.arrange(l1, l2, nrow = 1)\n```\n\n\nThe model fitted using the regularization parameter obtained from cross validation as shown above has forced majority of the model coefficients to be 0, thereby removing the variables from the model. The LASSO regression technique is therefore important in variable selection, since by setting some model coefficients to 0, it effectively removes them from the model, leaving us with a much smaller and interpretable model.\n\n## Elastic Net Regression\n\nIn this section, we fit an Elastic Net model, which is a mixture of both ridge and LASSO regression. We select the mixing-weight based on two methods:\n\n1. We compute the model regularization parameter $\\lambda$, as a sum of the cross validation value of $\\lambda$ computed in ridge regression, and that computed from LASSO regression. i.e.\n\n$$\\lambda = \\lambda_R + \\lambda_L$$\nWe then run a cross validation using this fixed $\\lambda$ on several values of $\\alpha$, and obtain the statistics as shown in the following chart:\n\n```{r elnet1}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n#| fig-cap: \"Using the regularization parameter obtained from cross validation\"\n\n# we are using benchmark: the value of lambda as: lambda_ridge + lambda_lasso found from cv.glmnet\nlambda_full <- (12.75054 + 0.1893415)\nalpha_seq_1 <- seq(from = 0, to = .01 + (0.1893415/lambda_full), length = 100)\ndeviance_vec <- nvars_vec <- err_vec <- vector()\nfor (i in 1:length(alpha_seq_1))\n{\n  mixture_model <- glmnet(x = x[train_rows, ],\n                          y = y[train_rows, ],\n                          family = \"gaussian\",\n                          alpha = alpha_seq_1[i],\n                          lambda = lambda_full)\n  \n  deviance_vec[i] <- mixture_model$dev.ratio\n  nvars_vec[i] <- mixture_model$df\n  err_vec[i] <- mse(\n    y[train_rows, ],\n    predict(mixture_model,\n            newx = x[train_rows, ])\n  )\n}\n\nm1 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = deviance))+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Deviance explained\")+\n  theme_minimal()+\n  scientific_theme\n\nm2 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = nvars))+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Non-zero coefficients\",\n       x = \"Alpha\", y = \"Count\")+\n  theme_minimal()+\n  scientific_theme\n\nm3 <- data.frame(\n  alpha = alpha_seq_1,\n  deviance = deviance_vec,\n  nvars = nvars_vec,\n  err = err_vec\n) |>\n  ggplot()+\n  geom_line(aes(x = alpha, y = err_vec))+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"Alpha\", y = \"MSE\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m1, m2, m3, nrow = 1)\n```\n\n\n2. In this second method, we construct a grid of $\\alpha$ values which are equally spaced on the range $[0, 1]$, and for each $\\alpha_i$, we perform cross validation on the training set to obtain the most suitable value of the regularization parameter $\\lambda_i$.^[This is the most suitable technique to use in Elastic-Net regression.] The result is shown below:^[Cross validation is performed to determine the best value for the regularization coefficient for every value of alpha chosen. The value of alpha = 0.386387387, and the corresponding lambda = 0.1106008, gave the lowest training error(0.4), as well as the highest deviance(37%), using only 19 non-zero model coefficients.]\n\n```{r elnet2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nmixture_grid <- read.csv(\"data/lm_mixture_grid.csv\")\n\n#   alpha       lambda    deviance    nvars mse\n# \t0.386387387 0.1106008 0.36776076  19    0.4072456\n\n# plotting a heatmap\nm3 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = lambda)) +\n  geom_line(alpha= .1)+\n  geom_smooth(method = \"gam\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Regularization parameter\",\n       x = \"Alpha\", y = \"Lambda\") +\n  theme_minimal()+\n  scientific_theme\n\nm4 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = deviance)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Explained(%)\") +\n  theme_minimal()+\n  scientific_theme\n\nm5 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = rmse)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"ALpha\", y = \"MSE\") +\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m3, m4, m5, nrow = 1)\n```\n\nFrom the above chart, it shows that, as the value of $\\alpha$ increases, then the regularization parameter $\\lambda$ reduces, which shows that for this model, a very small proportion of $\\lambda$ was attributed to the LASSO penalty. The deviance resulting from this is quite low (less than 30%). The training error, as well as the deviance are suitable for small values of alpha chosen. For the Elastic Net regression, we will proceed with this $2^{nd}$ model hyper-parameters, since it gives a lower training error, for few variables, as compared to the rest.\n\n```{r}\nmixture_best <- glmnet(x = x[train_rows, ],\n                       y = y[train_rows, ],\n                       family = \"gaussian\",\n                       alpha = 0.386387387, # 0.1141151\n                       lambda = 0.1106008)# 0.2832865\n```\n\n\n## Principal Components Regression\n\n```{r pca1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that PCA constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\npcr_model <- pcr(`Annualized Return` ~ .,\n                 data = train,\n                 scale = T,\n                 center = T,\n                 validation = 'CV')\n# summary(pcr_model) # Best model is Lowest RMSE: 1 comps, 5 comps\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(pcr_model$scores),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n```\n\nIn this section, Principal components analysis model is fitted using only 56 principal components and the results of the Principal Components Regression are displayed. \n\n```{r pca2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvar_Explained_df <- data.frame(\n  component = 1:56,\n  component_var = pcr_model$Xvar/sum(pcr_model$Xvar)\n) |>\n  mutate(cum_var = cumsum(component_var))\n\np1 <- var_Explained_df |>\n  ggplot(aes(x = component, y = component_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variance explained\",\n       x = \"Component\", y = \"Variance\")+\n  theme_minimal() +\n  scientific_theme\n\np2 <- var_Explained_df |>\n  ggplot(aes(x = component, y = cum_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variance explained\",\n       x = \"# of Components\", y = \"Variance\")+\n  theme_minimal() +\n  scientific_theme\n\ngrid.arrange(p1, p2, nrow = 1)\n\n```\n\nFrom the scree-plot above, it is evident that the first two components account for maximal variability in the predictor matrix. In choosing the suitable number of components to run regression with, we examine the plot of cross-validation error below:\n\n```{r pca3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\nvalidationplot(pcr_model, val.type = 'RMSEP', type = 'o',\n               main = \"Cross validation (PCR)\",\n               ylab = \"RMSE\", xlab = \"Number of components\")\n```\n\nFrom the validation plot using RMSE as the error metric, the model with the lowest cross validation error is the 2-components model, which we will proceed with.\n\n## Kernel Principal Components Regression\n\n```{r kpca1}\nstep_init <- recipe(`Annualized Return` ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-1]\nsig_range <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  prep(training = train, verbose = TRUE) |>\n  juice(all_of(cn_updated)) |>\n  as.matrix() |>\n  sigest(frac = 1) \n\nkpca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_kpca(\n    cn_updated, \n    num_comp = 30, \n    options = list(kernel = \"rbfdot\", kpar = list(sigma = sig_range[2]))\n  )\n\nkpca_model <- \n  kpca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\n```\n\n```{r kpca2}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that k-PCA constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\nkpca_features <- juice(kpca_model, matches(\"PC\"))\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(kpca_features),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n```\n\nIn this section, the Kernel-PCA is first performed on the predictor matrix, and then the most optimal subset of the resulting components constructed is used to fit a linear regression model on our training dataset. For the Kernel-PCA, we chose a radial basis kernel, where the hyper-parameter $\\sigma$ was chosen automatically based on our data.\n\n::: column-margin\nThe estimated value of $\\sigma$, is based upon the 10%, and 90% quantile of $||x - x^`||^2$, where we chose $\\sigma$ as the median value of: 0.008732801.\n:::\n\nThe charts below show the percentage variability in the original predictor matrix explained by the resulting kernel principal components:\n\n```{r kpca3}\n#| cache: true\n#| fig-height: 10\n#| fig-width: 10\nkpca_eigen <- read.csv(\"data/lm_kpca_eigen.csv\")\n\n# plotting\nk1 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = component_contribution))+\n  geom_point(aes(x = (component), y = component_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal() + \n  scientific_theme\n\nk2 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = group_contribution))+\n  geom_point(aes(x = (component), y = group_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal() + \n  scientific_theme\n\nk3 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_error))+\n  geom_point(aes(x = (component), y = train_error))+\n  labs(subtitle = \"Cross-validation Training error\",\n       x = \"# of Components\",y = \"RMSE\")+\n  theme_minimal() + \n  scientific_theme\n\nk4 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = y_explained))+\n  geom_point(aes(x = (component), y = y_explained))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variability in response explained\",\n       x = \"# of Components\",y = \"Adjusted R-squared\")+\n  theme_minimal() + \n  scientific_theme\n\ngrid.arrange(k1, k2, k3, k4, nrow = 2)\n```\n\nFrom the scree plot on chart 1, it is evident that the first 4 kernel principal components explain maximal variability in the original predictor matrix. The cross validation training error increases as more components are added into the model. In selecting the optimal number of principal components to include in the model, we select 10 components, since this gives the highest amount of variability explained in the response variable.\n\n```{r kpca4}\n# Predicting the test data\nprep_test <- bake(kpca_model, test)\n\n# Model fitted to the 16 components\nkpc_df <- cbind(kpca_features[, 1:16], \n                 train[, \"Annualized Return\"]) |>\n  setNames(c(colnames(kpca_features)[1:16], \"Annualized Return\"))\n\nkpc_lm <- lm(`Annualized Return` ~ ., data = kpc_df)\n```\n\n## Partial Least Squares\n\n```{r pls1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that PLS also constructs components in a way that they are orthogonal to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\n\npls_model <- plsr(`Annualized Return` ~ .,\n                  data = train,\n                  scale = T,\n                  center = T,\n                  validation = 'CV')\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(pls_model$scores),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n\n```\n\nThis section covers the analysis section for the partial least squares model. The PLS model is fitted using cross-validation, and the data is centered and scaled before the model fitting process.\n\nThe scree-plot for the PLS model is shown below\n\n```{r pls2}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvar_Explained_df <- data.frame(\n  component = 1:56,\n  component_var = pls_model$Xvar/sum(pls_model$Xvar)\n) |>\n  mutate(cum_var = cumsum(component_var))\n\np3 <- var_Explained_df |>\n  ggplot(aes(x = component, y = component_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variance explained\",\n       x = \"Component\", y = \"Variance\")+\n  theme_minimal()+\n  scientific_theme\n\np4 <- var_Explained_df |>\n  ggplot(aes(x = component, y = cum_var))+\n  geom_line()+\n  geom_point()+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variance explained\",\n       x = \"# of Components\", y = \"Variance\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(p3, p4, nrow = 1)\n```\n\nThe above chart shows that the first 4 components explain majority of the variability in the original predictor matrix (roughly 70%). The Training error from cross validation is shown below:\n\n```{r pls3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nvalidationplot(pls_model, val.type = 'RMSEP', type = 'o',\n               main = \"Cross validation training error\",\n               xlab = \"Number of components\", ylab = \"Root-MSE\")\n```\n\nFrom this chart, we select only the first component, to include in our final PLS model, since it gives the lowest cross validation error. A comparison of the variability in the response explained by the PCR and PLS model is shown below, in order to capture the difference between PLS and PCR.\n\nTo examine the difference between PLS and PCA in explaining the response variable, we examine the (%) variance explained in the response by each component as shown below:\n\n```{r pls4}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\ncomp_pcr_pls <- data.frame(\n  component = 1:56,\n  pcr_y = c(6.371, 9.485, 9.514, 15.52, 18.89, 21.24, 22.73, 22.73, 23.43, \n23.49, 24.11, 27.96, 29.79, 32.94, 32.95, 40.12, 40.78, 41.33, \n41.34, 41.35, 41.61, 41.62, 43.01, 44.65, 44.92, 45.03, 45.03, \n45.21, 46.65, 50.65, 50.95, 50.98, 52.68, 53.37, 53.46, 54.42, \n55.25, 56.66, 62.93, 64.27, 64.7, 65.41, 69.03, 69.28, 74.77, \n76.58, 77.39, 77.43, 77.61, 77.61, 82.76, 84.51, 84.69, 84.69, \n84.94, 88.58),\npls_y = c(14.04, 25.9, 34.83, 43.67, 46.56, 48.28, 51.06, 53.97, 57.33, \n59.73, 62.36, 65, 66.39, 68.83, 70.39, 72.24, 73.26, 74.16, 74.63, \n75.52, 76.62, 77.28, 78.49, 79.24, 79.92, 80.94, 81.45, 81.66, \n82.19, 83.03, 83.53, 84.46, 84.83, 86.38, 87.09, 87.66, 88.72, \n89.3, 89.79, 90.1, 90.63, 91.26, 92.39, 93.62, 94.7, 95.38, 95.5, \n95.75, 96.04, 96.38, 96.64, 96.95, 97.14, 97.34, 97.78, 97.93\n)\n) |>\n  mutate(pcr_y = pcr_y/100,\n         pls_y = pls_y/100)\n\ncomp_pcr_pls |>\n  ggplot()+\n  geom_point(aes(x = component, y = pcr_y, col = \"PCR\"))+\n  geom_line(aes(x = component, y = pcr_y, col = \"PCR\"))+\n  geom_line(aes(x = component, y = pls_y, col = \"PLS\"))+\n  geom_point(aes(x = component, y = pls_y, col = \"PLS\"))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = \"Comparison of PCR AND PLS\",\n       x = \"# of components\",\n       y = \"Variance in response explained\")+\n  theme_minimal()+\n  scientific_theme\n```\n\nFrom the chart above, it is evident that for any number of principal components, the PLS explains the highest variability in the response variable, since it is a *supervised* dimensionality reduction technique, where the response variable guides the reduction process, as compared to the PLS which is an unsupervised technique.\n\n## Independent Components Analysis\n\n```{r ica1}\nset.seed(37)\nica_model <- step_init |>\n  step_ica(\n    all_of(cn_updated),\n    num_comp = 30,\n    options = list(\n      maxit = 1000,\n      tol = 1e-10\n      #alg.type = \"deflation\"\n    )\n  )\n\nica_train <- \n  ica_model %>%\n  prep(training = train, verbose = TRUE)\n```\n\n```{r ica2}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"It is evident that ICA also constructs components in a way that they are STATISTICALLY INDEPENDENT to each other and hence not correlated. This helps in dealing with the multi-collinearity present in the data.\"\n#| cache: true\nica_features <- juice(ica_train, matches(\"IC\"))\n\n# Visualizing the correlation matrix\ncorrplot::corrplot(corr = cor(ica_features),\n                   method = \"square\",\n                   type = \"full\",\n                   order = \"FPC\",\n                   title = NULL,\n                   tl.cex = .35,\n                   tl.col = \"black\")\n\n```\n\nThis section gives a summary of the analysis performed using Independents Components Analysis. For the ICA, only 30 independent components are constructed. Results from the cross validation analysis performed on ICA features is shown below: \n\n```{r ica3}\n#| cache: true\n#| fig-height: 5\n#| fig-width: 10\n\nica_stats <- read.csv(\"data/lm_ica_stats.csv\")\n\n# plotting\ni1 <- ica_stats |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_error))+\n  geom_point(aes(x = (component), y = train_error))+\n  labs(subtitle = \"Training error\",\n       x = \"# of Components\",y = \"Root-MSE\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- ica_stats |>\n  ggplot()+\n  geom_line(aes(x = (component), y = y_explained))+\n  geom_point(aes(x = (component), y = y_explained))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Variability in response explained\",\n       x = \"# of Components\",y = \"Adjusted R-squared\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 1)\n```\n\n```{r ica4}\n# Predicting the test data\nprep_test <- bake(ica_train, test)\n\n# Model fitted to the 16 components\nica_df <- cbind(ica_features[, 1], \n                train[, \"Annualized Return\"]) |>\n  setNames(c(colnames(ica_features)[1], \"Annualized Return\"))\n\nica_lm <- lm(`Annualized Return` ~ ., data = ica_df)\n```\n\nBased on the cross validation plots, we proceed with an regression model fitted with only the first ICA components.\n\n\n## Comparison of models\n\n```{r c1}\n# prediction on the training data\ntrain_accuracy <- data.frame(\n  ridge_cv_pred = predict(ridge_best_cv, newx = x[train_rows, ]),\n  #ridge_sgd_pred = predict(ridge_best_sgd, newx = x[train_rows, ]),\n  lasso_cv_pred = predict(lasso_best_cv, newx = x[train_rows, ]),\n  #lasso_sgd_pred = predict(ridge_best_sgd, newx = x[train_rows, ]),\n  mixture_pred_train <- predict(mixture_best, x[train_rows, ]),\n  pcr_pred = predict(pcr_model, train, ncomp = 2),\n  pls_pred = predict(pls_model, train, ncomp = 1),\n  kpca_pred = predict(kpc_lm, kpca_features),\n  ica_pred = predict(ica_lm, ica_features),\n  actual = y[train_rows, ]\n)\n\n# test accuracy\nprep_test_ica <- bake(ica_train, test)\nprep_test_kpca <- bake(kpca_model, test)\n\n\ntest_accuracy <- data.frame(\n  ridge_cv_pred = predict(ridge_best_cv, newx = x[-train_rows, ]),\n  #ridge_sgd_pred = predict(ridge_best_sgd, newx = x[-train_rows, ]),\n  lasso_cv_pred = predict(lasso_best_cv, newx = x[-train_rows, ]),\n  #lasso_sgd_pred = predict(ridge_best_sgd, newx = x[-train_rows, ]),\n  mixture_pred_train <- predict(mixture_best, x[-train_rows, ]),\n  pcr_pred = predict(pcr_model, test, ncomp = 2),\n  pls_pred = predict(pls_model, test, ncomp = 1),\n  kpca_pred = predict(kpc_lm, prep_test_kpca),\n  ica_pred = predict(ica_lm, prep_test_ica),\n  actual = y[-train_rows, ]\n)\n\ntrain_err <- test_err <- vector()\nfor (i in 1:(ncol(train_accuracy) - 1))\n{\n  train_err[i] <- mse(train_accuracy[, \"actual\"],\n                      train_accuracy[, i])\n  test_err[i] <- mse(test_accuracy[, \"actual\"],\n                     test_accuracy[, i])\n}\n\nerr_df <- data.frame(\n  model = c(\"Ridge(CV)\", \"LASSO(CV)\", \"Elastic-Net\", \n            \"PCR\", \"PLS\", \"k-PCA\", \"ICA\"),\n  `Training error` = train_err,\n  `Testing error` = test_err\n)\n```\n\n\nIn this section, we compare all models fitted on the testing data. We use the mean squared error to gauge the best models.\n\n```{r c2}\nkable(err_df)\n```\n\nThe charts on performance are shown below:\n\n```{r c3}\n#| fig-width: 10\n#| fig-height: 5\nt1 <- err_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(model, train_err), y = train_err))+\n  labs(title = \"Training error\", x = \"Model\", y = \"MSE\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\n\nt2 <- err_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(model, test_err), y = test_err))+\n  labs(title = \"Testing error\", x = \"Model\", y = \"MSE\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\ngrid.arrange(t1, t2, nrow = 1)\n```\n\nFrom the above charts and statistics, it is evident that the Kernel PCA, and Elastic-Net regression model emerge the best, and their performance in both the training set and testing set is consistent. The PCR, PLS and ICA model offer a poor fit to the data in both two sets of data. The Ridge and LASSO regression models have more less the same performance in both sets of data. The performance of Kernel PCA indicates that there exists some non-linear dependencies on the data - which Kernel-PCA is good at uncovering as compared to PCA.\n\n\n# Classification models (II)\n\n```{r cl11}\nfdf <- read.csv(\"data/glm_fdf.csv\")\nrownames(fdf) <- fdf[, 1]\nfdf <- fdf[, -1]\ncolnames(fdf) <- c(\"Annualized Return\", \"Annualized Std Dev\", \"Annualized Sharpe (Rf=30.48%)\", \n\"rho1\", \"rho2\", \"rho3\", \"rho4\", \"rho5\", \"rho6\", \"Q(6) p-value\", \n\"daily  Std Dev\", \"Skewness\", \"Kurtosis\", \"Excess kurtosis\", \n\"Sample skewness\", \"Sample excess kurtosis\", \"Semi Deviation\", \n\"Gain Deviation\", \"Loss Deviation\", \"Downside Deviation (MAR=40%)\", \n\"Downside Deviation (Rf=30.48%)\", \"Downside Deviation (0%)\", \n\"Maximum Drawdown\", \"Historical VaR (95%)\", \"Historical ES (95%)\", \n\"Modified VaR (95%)\", \"Modified ES (95%)\", \"daily downside risk\", \n\"Annualised downside risk\", \"Downside potential\", \"Omega\", \"Sortino ratio\", \n\"Upside potential\", \"Upside potential ratio\", \"Omega-sharpe ratio\", \n\"Sterling ratio\", \"Calmar ratio\", \"Burke ratio\", \"Pain index\", \n\"Ulcer index\", \"Pain ratio\", \"Martin ratio\", \"Minimum\", \"Quartile 1\", \n\"Median\", \"Arithmetic Mean\", \"Geometric Mean\", \"Quartile 3\", \n\"Maximum\", \"SE Mean\", \"LCL Mean (0.95)\", \"UCL Mean (0.95)\", \"StdDev Sharpe (Rf=0.1%, p=95%):\", \n\"VaR Sharpe (Rf=0.1%, p=95%):\", \"ES Sharpe (Rf=0.1%, p=95%):\", \n\"Alpha\", \"Beta\", \"Beta+\", \"Beta-\", \"R-squared\", \"Annualized Alpha\", \n\"Correlation\", \"Correlation p-value\", \"Tracking Error\", \"Active Premium\", \n\"Information Ratio\", \"Treynor Ratio\", \"Beta CoVariance\", \"Beta CoSkewness\", \n\"Beta CoKurtosis\", \"Specific Risk\", \"Systematic Risk\", \"Total Risk\", \n\"Up Capture\", \"Down Capture\", \"Up Number\", \"Down Number\", \"Up Percent\", \n\"Down Percent\", \"Direction\")\n\n# constructing the training and testing set\nset.seed(472)\ntrain_rows <- sample(.80*nrow(fdf))\ntrain <- fdf[train_rows, ]\ntest <- fdf[-train_rows, ]\n\n# constructing the model matrix\nx <- model.matrix(Direction ~ ., data = fdf)[, -1]\ny <- as.matrix(fdf[, \"Direction\"])\n```\n\n## Ridge Regression\n\n```{r clr1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of ridge regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n# cross vaidating to find best lambda\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"binomial\",\n                    alpha = 0)\nplot(cv.out)\n```\n\nIn this section, we analyze a ridge regression model for classification A suitable regularization parameter was obtained using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 2.610173]. The model fit statistics are shown below:\n\n```{r clr2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\n# fitting the model with the best lambda\nridge_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"binomial\",\n                        alpha = 0,\n                        lambda = cv.out$lambda.min)\n\n# predicting the train and test data\nridge_prob_test <- predict(ridge_best_cv, x[-train_rows, ], type = \"response\")\nridge_prob_train <- predict(ridge_best_cv, x[train_rows, ], , type = \"response\")\nridge_pred_train <- ifelse(ridge_prob_train > 0.4892546, \"Up\", \"Down\")\nridge_pred_test <- ifelse(ridge_prob_test > 0.4892546, \"Up\", \"Down\")\n\ncf_cv <- as.numeric(coef(ridge_best_cv))\n\nr1 <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n) |>\n  select(coef_cv) |>\n  unlist() |> as.numeric() |>\n  quantile(probs = seq(from = 0, to = 1, length = 100)) |>\n  as.numeric() |> data.frame() |>\n  setNames(\"quantiles\") |>\n  mutate(prob = seq(from = 0, to = 1, length = 100)) |>\n  ggplot()+\n  geom_line(aes(x = prob, y = quantiles)) +\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(title = \"Distribution of model coefficients: (Ridge-CV)\",\n       x = \"Quantile Probability\", y= \"Coefficient value\")+\n  theme_minimal()+\n  scientific_theme\n\nridge_glm_prob <- predict(ridge_best_cv, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nr2 <- roc(response = train[,\"Direction\"], predictor = ridge_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: Ridge regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(r1, r2, nrow = 1)\n```\n\nIn the chart above, it is evident that about 60% of the model coefficients have shrunk to be close to 0, showing how effective ridge regression is in producing interpretable models. The performance of the ridge regression model on the training dataset is shown in the Receiver Operating Characteristic Curve, with an AUC of: 0.85435.\n\n## LASSO Regression\n\n```{r cl1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Cross validation statistics for estimating the regularization parameter of LASSO regression, and their error bars. The dotted line represent estimate of lambda which is within its one standard error\"\n#| fig-width: 5\n#| fig-height: 5\n#| cache: true\n# cross vaidating to find best lambda\nset.seed(37) # to ensure reproducibility\ncv.out <- cv.glmnet(x = x[train_rows, ],\n                    y = y[train_rows, ],\n                    family = \"binomial\",\n                    alpha = 1)\nplot(cv.out)\n```\n\nIn this section, we analyze the LASSO regression model fitted. A suitable regularization parameter was obtained using cross-validation^[The best estimate for $\\lambda$ using cross validation was found to be: 0.07095985]. The model fit is displayed below:\n\n```{r cl2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\n# fitting the model with the best lambda\nlasso_best_cv <- glmnet(x = x[train_rows, ],\n                        y = y[train_rows, ],\n                        family = \"binomial\",\n                        alpha = 1,\n                        lambda = cv.out$lambda.min)\n\n#predictions\nlasso_prob_test <- predict(lasso_best_cv, x[-train_rows, ], type = \"response\")\nlasso_prob_train <- predict(lasso_best_cv, x[train_rows, ], type = \"response\")\nlasso_pred_train <- ifelse(lasso_prob_train > 0.4854385, \"Up\", \"Down\")\nlasso_pred_test <- ifelse(lasso_prob_test > 0.4854385, \"Up\", \"Down\")\n\ncf_cv <- as.numeric(coef(lasso_best_cv))\n\nl1 <- data.frame(\n  col = c(\"(Intercept)\", colnames(x)),\n  coef_cv = cf_cv\n) |>\n  select(coef_cv) |>\n  mutate(status = ifelse(coef_cv == 0, \"Zero coefficient\", \"Non-zero coefficient\")) |>\n  ggplot()+\n  geom_bar(aes(x = status), col = \"black\", alpha = .5, width = .4) +\n  labs(title = \"Distribution of model coefficients: (LASSO-CV)\",\n       x = \"Status\", y= \"Coefficient count\")+\n  theme_minimal()+\n  scientific_theme\n\nlasso_glm_prob <- predict(lasso_best_cv, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nl2 <- roc(response = train[,\"Direction\"], predictor = lasso_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: LASSO regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(l1, l2, nrow = 1)\n```\n\nIn the chart above, it is evident that about 87% of the model coefficients have set to 0, showing how effective LASSO regression is in feature selection. The performance of the LASSO regression model on the training dataset is shown in the Receiver Operating Characteristic Curve, with an AUC of: 0.8592.\n\n## Elastic-net Regression\n\n```{r cel1}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"The Receiver Operating Characteristic curve for the ElasticNet model using an alpha = 0.062063062, and lambda = 0.62452991. The Area Under Curve (AUC) is: 0.8641\"\n#| fig-width: 5\n#| fig-height: 5\nmixture_best <- glmnet(x = x[train_rows, ],\n                       y = y[train_rows, ],\n                       family = \"binomial\",\n                       alpha = 0.062063062, \n                       lambda = 0.62452991)\n\n# predictions\nelnet_prob_test <- predict(mixture_best, x[-train_rows, ], type = \"response\")\nelnet_prob_train <- predict(mixture_best, x[train_rows, ], type = \"response\")\nelnet_pred_train <- ifelse(elnet_prob_train > 0.50138058, \"Up\", \"Down\")\nelnet_pred_test <- ifelse(elnet_prob_test > 0.50138058, \"Up\", \"Down\")\n\nelnet_glm_prob <- predict(mixture_best, type = \"response\", newx = x[train_rows, ]) |>\n  as.numeric()\nroc(response = train[,\"Direction\"], predictor = elnet_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: Elastic-Net regression\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\n```\n\nIn this section, the fit of the mixture of LASSO and Ridge regression on the data is shown. Suitable values for the mixing weight $\\alpha$, and the redularization parameter, $\\lambda$ are found using cross validation, where for a fixed value of $\\alpha$, the best $\\lambda$ is searched for, and several accuracy metrics are computed.\n\n```{r cel2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nmixture_grid <- read.csv(\"data/glm_mixture_grid_stock.csv\")\n\n# plotting the charts\nm1 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = lambda)) +\n  geom_line(alpha= .1)+\n  geom_smooth(method = \"gam\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Regularization parameter\",\n       x = \"Alpha\", y = \"Lambda\") +\n  theme_minimal()+\n  scientific_theme\n\nm2 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = deviance)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  scale_y_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Deviance explained\",\n       x = \"Alpha\", y = \"Explained(%)\") +\n  theme_minimal()+\n  scientific_theme\n\nm3 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = accuracy)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Training error\",\n       x = \"ALpha\", y = \"MSE\") +\n  theme_minimal()+\n  scientific_theme\n\nm4 <- mixture_grid |>\n  data.frame() |>\n  ggplot(aes(x = alpha, y = nvars)) +\n  geom_line(alpha = .1)+\n  geom_smooth(method = \"loess\")+\n  scale_x_continuous(labels = scales::percent_format())+\n  labs(subtitle = \"Model sparsity\",\n       x = \"Alpha\", y = \"Non-zero coefficients\") +\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(m1, m2, m3, m4, \n             nrow = 2)\n# we proceed with: alpha: 0.062063062 lambda: 0.62452991\n```\n\n\nFrom the charts above, it is evident that as the $\\alpha$ increases, then the model tends to be more sparse, the deviance explained decreases while the training error rate decreases. The best combination of the $\\alpha$, and $\\lambda$ parameter are chosen to minimize the cross validation error.\n\n## Principal Components Analysis\n\n```{r cp1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\n\npca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_pca(\n    all_of(cn_updated), \n    num_comp = 30,\n    id = 'pca')\n\npca_model <- \n  pca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\npca_features <- juice(pca_model, matches(\"PC\"))\n\n# Predicting the test data\nprep_test <- bake(pca_model, test)\n\n# Model fitted to the 2 components\npca_df <- cbind(pca_features[, 1:3], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(pca_features)[1:3], \"Direction\"))\npca_glm <- glm(factor(Direction) ~ ., data = pca_df, family = \"binomial\")\npca_glm_prob <- predict(pca_glm, type = \"response\")\n\n# predictions\npca_prob_test <- predict(pca_glm, prep_test, type = \"response\")\npca_prob_train <- predict(pca_glm, pca_features, type = \"response\")\npca_pred_train <- ifelse(pca_prob_train > 0.500132338, \"Up\", \"Down\")\npca_pred_test <- ifelse(pca_prob_test > 0.500132338, \"Up\", \"Down\")\n```\n\nIn this section, we ran the principal components analysis model using 30 principal components and the results of cross validation on the principal components are displayed.\n\n```{r cp2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nvar_pca <- recipes::tidy(pca_model, id = \"pca\", type = \"variance\") |>\n  create_var_explained() |>\n  select(component, `percent variance`, `cumulative percent variance`) |>\n  mutate(`percent variance` = (`percent variance`)/100,\n         `cumulative percent variance` = (`cumulative percent variance`)/100)\n\npca_acc <- read.csv(\"data/glm_pca_eigen_stock.csv\")\n\n# plotting\np1 <- var_pca |>\n  ggplot()+\n  geom_line(aes(x = (component), y = `percent variance`))+\n  geom_point(aes(x = (component), y = `percent variance`))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal()+\n  scientific_theme\n\np2 <- var_pca |>\n  ggplot()+\n  geom_line(aes(x = (component), y = `cumulative percent variance`))+\n  geom_point(aes(x = (component), y = `cumulative percent variance`))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal()+\n  scientific_theme\n\np3 <- pca_acc |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\np4 <- pca_acc |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(p1, p2, p3, p4, nrow = 2)\n```\n\n```{r cp3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"PCA is applied to the dataset, and the first two principal components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.8084\"\n#| fig-height: 10\n#| fig-width: 5\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\npp1 <- pca_model$template |>\n  ggplot()+\n  geom_point(aes(x = PC01, y = PC02, col = Direction))+\n  labs(title = \"Principal Components Analysis\",\n       x = \"PC-01\", y = \"PC-02\")+\n  theme_minimal() + \n  scientific_theme\n\npp2 <- roc(response = train[,\"Direction\"], predictor = pca_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: PCA\",\n       x = \"Specificity\", y = \"Sensitivity\") + \n  scientific_theme\n\ngrid.arrange(pp1, pp2, nrow = 2)\n```\n\nFrom the above charts, the first three principal components explain maximal variability in the predictor space. Cross validation on the training set indicates that, the first three principal components give the best model in terms of Overall accuracy and Kappa. Hence for the purpose of model fitting, we will only use three principal components.\n\n## Kernel Principal Components Analysis\n\n```{r ckpca1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\nsig_range <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  prep(training = train, verbose = TRUE) |>\n  juice(all_of(cn_updated)) |>\n  as.matrix() |>\n  sigest(frac = 1) \n\nkpca_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_kpca(\n    all_of(cn_updated), \n    num_comp = 30, \n    options = list(kernel = \"rbfdot\", kpar = list(sigma = sig_range[2]))\n  )\n\nkpca_model <- \n  kpca_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\nkpca_features <- juice(kpca_model, matches(\"PC\"))\n\n## Predicting the test data\nprep_test <- bake(kpca_model, test)\n\n# Model fitted to the 2 components\nkpc_df <- cbind(kpca_features[, 1:2], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(kpca_features)[1:2], \"Direction\"))\n\nkpc_glm <- glm(factor(Direction) ~ ., data = kpc_df, family = \"binomial\")\nkpca_glm_prob <- predict(kpc_glm, type = \"response\")\n\n# predictions\nkpca_prob_test <- predict(kpc_glm, prep_test, type = \"response\")\nkpca_prob_train <- predict(kpc_glm, kpca_features, type = \"response\")\nkpca_pred_train <- ifelse(kpca_prob_train > 0.49820248, \"Up\", \"Down\")\nkpca_pred_test <- ifelse(kpca_prob_test > 0.49820248, \"Up\", \"Down\")\n```\n\nIn this section, the Kernel principal components analysis model is fitted using 30 components and the cross validation results are shown below:\n\n```{r ckpca2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 10\nkpca_eigen <- read.csv(\"data/glm_kpca_eigen_stock.csv\")\n\n# plotting\nk1 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = component_contribution))+\n  geom_point(aes(x = (component), y = component_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(title = NULL,\n       subtitle = \"Predictor space variance explained\",\n       x = \"Component\",y = \"Variance explained\")+\n  theme_minimal()+\n  scientific_theme\n\nk2 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = group_contribution))+\n  geom_point(aes(x = (component), y = group_contribution))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cumulative variability in predictors explained\",\n       x = \"# of Components\",y = NULL)+\n  theme_minimal()+\n  scientific_theme\n\nk3 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\nk4 <- kpca_eigen |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(k1, k2, k3, k4, nrow = 2)\n```\n\n```{r ckpca3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"Kernel PCA is applied to the dataset, and the first two principal components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.7908\"\n#| fig-width: 5\n#| fig-height: 10\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\npp1 <- kpca_model$template |>\n  ggplot()+\n  geom_point(aes(x = kPC01, y = kPC02, col = Direction))+\n  labs(title = \"Kernel Principal Components Analysis\",\n       x = \"kPC-01\", y = \"kPC-02\")+\n  theme_minimal()+\n  scientific_theme\n\npp2 <- roc(response = train[,\"Direction\"], predictor = kpca_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: kPCA\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(pp1, pp2, nrow = 2)\n```\n\nFrom the above charts, the first four components explain maximal variability in the predictor space. Cross validation on the training set indicate that, only the first two or five components give the best model in terms of Overall accuracy and Kappa. Hence for the purpose of model fitting, we will only use two components^[This is because for the 5-component and 2-component model,there is no big difference, hence we fit a model using 2 components only to ensure parsimonity].\n\n\n## Independent Components Analysis\n\n```{r cica1}\nstep_init <- recipe(Direction ~ ., data = train)\n\n# determining reasonable values for sigma in radial basis function\ncn_updated <- colnames(fdf)[-ncol(fdf)]\n\nica_init <- \n  step_init |>\n  step_center(all_of(cn_updated)) |>\n  step_scale(all_of(cn_updated)) |>\n  step_ica(\n    all_of(cn_updated), \n    num_comp = 30,\n    id = 'ica')\n\nica_model <- \n  ica_init %>%\n  prep(training = train, retain = TRUE, verbose = TRUE)\nica_features <- juice(ica_model, matches(\"IC\"))\n\n# Predicting the test data\nprep_test <- bake(ica_model, test)\n\n# Model fitted to the 2 components\nica_df <- cbind(ica_features[, 1:15], \n                train[, \"Direction\"]) |>\n  setNames(c(colnames(ica_features)[1:15], \"Direction\"))\n\nica_glm <- glm(factor(Direction) ~ ., data = ica_df, family = \"binomial\")\nica_glm_prob <- predict(ica_glm, type = \"response\")\n\n# predictions\nica_prob_test <- predict(ica_glm, prep_test, type = \"response\")\nica_prob_train <- predict(ica_glm, ica_features, type = \"response\")\nica_pred_train <- ifelse(ica_prob_train > 3.813941e-01, \"Up\", \"Down\")\nica_pred_test <- ifelse(ica_prob_test > 3.813941e-01, \"Up\", \"Down\")\n```\n\n\nThis section covers the application of Independent Components Analysis to the classification dataset. We restrict the number of independent Components to 30 components. \n\n```{r cica2}\n#| cache: true\n#| fig-width: 10\n#| fig-height: 5\nica_train_res <- read.csv(\"data/glm_ica_eigen_stock.csv\")\n# plotting\ni1 <- ica_train_res |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_acc))+\n  geom_point(aes(x = (component), y = train_acc))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Overall Accuracy\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- ica_train_res |>\n  ggplot()+\n  geom_line(aes(x = (component), y = train_kappa))+\n  geom_point(aes(x = (component), y = train_kappa))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Cross-validation accuracy\",\n       x = \"# of Components\",y = \"Cohen's Kappa\")+\n  theme_minimal()+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 1)\n```\n\n```{r cica3}\n#| column: margin\n#| fig-show: \"hold\"\n#| fig-cap: \"ICA is applied to the dataset, and the first two Independent components are plotted, and coloured by the Direction variable. For the Receiver Operating Characteristic, the AUC is: 0.7898\"\n#| fig-height: 10\n#| fig-width: 5\n#| cache: true\n# plotting the seperation of the class by PC1, and 2\ni1 <- ica_model$template |>\n  ggplot()+\n  geom_point(aes(x = IC01, y = IC02, col = Direction))+\n  labs(title = \"Independent Components Analysis\",\n       x = \"IC-01\", y = \"IC-02\")+\n  theme_minimal()+\n  scientific_theme\n\ni2 <- roc(response = train[,\"Direction\"], predictor = ica_glm_prob) |>\n  ggroc()+\n  theme_minimal()+\n  labs(title = \"ROC: ICA\",\n       x = \"Specificity\", y = \"Sensitivity\")+\n  scientific_theme\n\ngrid.arrange(i1, i2, nrow = 2)\n```\n\n\nFrom the charts above, the highest overall accuracy and Kappa are obtained when using 15 independent components, although as compared to the cross validation performance of the other models above, the ICA under-performs all models. We proceed to fit a GLM using the first 15 components.\n\n---\n\n## Comparison of Models\n\nIn this section, we compare all fitted models, on the test dataset. For comparison, we use the Overall Accuracy, although other metrics of classification models are quoted. For the cutoff probability, we select the cutoff which gave the highest Youden statistic on the training data.\n\n```{r comp1}\n#| cache: true\n#| column: margin\n#| fig-width: 5\n#| fig-height: 5\n#| fig-cap: \"The Receiver Operating characteristics for the models fitted on the training dataset\"\n\n# multiple ROCs\nsens_fun <- function(actual, predicted, cutoff)\n{\n  s <- vector()\n  for (i in 1:length(cutoff))\n  {\n    s[i] <- ModelMetrics::sensitivity(actual = actual,\n                                      predicted = predicted,\n                                      cutoff = cutoff[i])\n  }\n  return(s)\n}\n\nspec_fun <- function(actual, predicted, cutoff)\n{\n  s <- vector()\n  for (i in 1:length(cutoff))\n  {\n    pred_class <- ifelse(predicted > cutoff[i], \"Up\", \"Down\") |>\n      factor(levels = levels(actual))\n    s[i] <- spec_vec(actual,\n                     pred_class)\n  }\n  return(s)\n}\n\nroc_df <- data.frame(\n  thresh = seq(from = 0, to = 1, length = 200)) |>\n  mutate(\n    ridge_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ridge_prob_train),\n                                 cutoff = thresh),\n    lasso_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(lasso_prob_train),\n                                 cutoff = thresh),\n    elnet_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(elnet_prob_train),\n                                 cutoff = thresh),\n    pca_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(pca_prob_train),\n                                 cutoff = thresh),\n    kpca_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(kpca_prob_train),\n                                 cutoff = thresh),\n    ica_sensitivity = sens_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ica_prob_train),\n                                 cutoff = thresh)\n  ) |>\n  mutate(\n    ridge_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(ridge_prob_train),\n                                 cutoff = thresh),\n    lasso_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(lasso_prob_train),\n                                 cutoff = thresh),\n    elnet_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                 predicted = as.numeric(elnet_prob_train),\n                                 cutoff = thresh),\n    pca_specificity = spec_fun(actual = factor(y[train_rows,]),\n                               predicted = as.numeric(pca_prob_train),\n                               cutoff = thresh),\n    kpca_specificity = spec_fun(actual = factor(y[train_rows,]),\n                                predicted = as.numeric(kpca_prob_train),\n                                cutoff = thresh),\n    ica_specificity = spec_fun(actual = factor(y[train_rows,]),\n                               predicted = as.numeric(ica_prob_train),\n                               cutoff = thresh)\n  )\n\nView(roc_df)\n\nroc_df |>\n  ggplot()+\n  geom_line(aes(x = ridge_specificity, y = ridge_sensitivity, colour = \"Ridge\"))+\n  geom_line(aes(x = lasso_specificity, y = lasso_sensitivity, colour = \"LASSO\"))+\n  geom_line(aes(x = elnet_specificity, y = elnet_sensitivity, colour = \"Elastic-Net\"))+\n  geom_line(aes(x = pca_specificity, y = pca_sensitivity, colour = \"PCA\"))+\n  geom_line(aes(x = kpca_specificity, y = kpca_sensitivity, colour = \"k-PCA\"))+\n  geom_line(aes(x = ica_specificity, y = ica_sensitivity, colour = \"ICA\"))+\n  scale_x_reverse()+\n  scale_y_reverse()+\n  labs(title = \"ROC Comparison\", x = \"Specificity\", y = \"Sensitivity\")+\n  theme_minimal()+\n  scientific_theme\n```\n\n```{r comp2}\n# prediction on the training data\ntrain_accuracy <- data.frame(\n  ridge_cv_pred = ridge_pred_train,\n  lasso_cv_pred = lasso_pred_train,\n  mixture_pred_train <- elnet_pred_train,\n  pcr_pred = pca_pred_train,\n  kpca_pred = kpca_pred_train,\n  ica_pred = ica_pred_train,\n  actual = y[train_rows, ]\n) |>\n  mutate(\n    across(\n      .cols = where(is.character),\n      .fns = factor\n    )\n  )\n\ntest_accuracy <- data.frame(\n  ridge_cv_pred = ridge_pred_test,\n  lasso_cv_pred = lasso_pred_test,\n  mixture_pred_train <- elnet_pred_test,\n  pcr_pred = pca_pred_test,\n  kpca_pred = kpca_pred_test,\n  ica_pred = ica_pred_test,\n  actual = y[-train_rows, ]\n) |>\n  mutate(\n    across(\n      .cols = where(is.character),\n      .fns = factor,\n      levels = c(\"Down\", \"Up\")\n    )\n  )\n\ntrain_metric_df <- test_metric_df <- matrix(NA, nrow = 6, ncol = 14)\nfor (i in 1:(ncol(test_accuracy) - 1))\n{\n  cc_train <- caret::confusionMatrix(data = train_accuracy[, i],\n                                     reference = train_accuracy[, 7])\n  \n  train_metric_df[i, 2:14] <- c(as.numeric(cc_train$overall)[1:2],\n                                as.numeric(cc_train$byClass))\n  \n  cc_test <- caret::confusionMatrix(data = test_accuracy[, i],\n                                     reference = test_accuracy[, 7])\n  \n  test_metric_df[i, 2:14] <- c(as.numeric(cc_test$overall)[1:2],\n                               as.numeric(cc_test$byClass))\n}\n\ntrain_metric_df <- train_metric_df[, 1:10]\ntest_metric_df <- test_metric_df[, 1:10]\n\ntrain_metric_df <- train_metric_df |>\n  data.frame() |>\n  setNames(c(\"Model\", \"Accuracy\", \"Kappa\", \"Sensitivity\", \"Specificity\", \"PPV\", \"NPV\", \"Precision\", \"Recall\", \"F1\"))\n\ntest_metric_df <- test_metric_df |>\n  data.frame() |>\n  setNames(c(\"Model\", \"Accuracy\", \"Kappa\", \"Sensitivity\", \"Specificity\", \"PPV\", \"NPV\", \"Precision\", \"Recall\", \"F1\"))\n\ntest_metric_df$Model <- c(\"Ridge\", \"LASSO\", \"Elastic-Net\", \"PCA\", \"k-PCA\", \"ICA\")\ntrain_metric_df$Model <- c(\"Ridge\", \"LASSO\", \"Elastic-Net\", \"PCA\", \"k-PCA\", \"ICA\")\n\ntrain_metric_df <- train_metric_df[, c(1:7, 10)]\ntest_metric_df <- test_metric_df[, c(1:7, 10)]\n```\n\n```{r comp3}\n#| cache: true\nt1 <- train_metric_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(Model, Accuracy), y = Accuracy))+\n  scale_y_continuous(labels = percent_format())+\n  labs(x = \"Model\", y=\"Overall Accuracy\",\n       subtitle = \"Training set performance\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\n\nt2 <- test_metric_df |>\n  ggplot()+\n  geom_col(aes(x = fct_reorder(Model, Accuracy), y = Accuracy))+\n  scale_y_continuous(labels = percent_format())+\n  labs(subtitle = \"Test set performance\", x = \"Model\", y = \"Overall Accuracy\")+\n  theme_minimal() +\n  scientific_theme +\n  coord_flip()\n\ngrid.arrange(t1, t2, nrow = 1)\n```\n\nThe training set performance metrics are displayed below:\n\n```{r comp4}\n#| fig-width: 12\n#| fig-height: 6\n#| cache: true\n#| fig-cap: \"Performance of Models on the training set\"\n\nkk_train <- knitr::kable(train_metric_df)\nkable_classic(\n  kable_input = kk_train,\n  full_width=F,\n  position=\"left\")\n\n```\n\n---\n\nThe testing set performance metrics are displayed below:\n\n```{r comp5}\n#| fig-width: 12\n#| fig-height: 6\n#| cache: true\n#| fig-cap: \"Performance of Models on the testing set\"\nkk_test <- knitr::kable(test_metric_df)\nkable_classic(\n  kable_input = kk_test,\n  full_width=F,\n  position=\"left\")\n\n```\n\n---\n\nFrom the statistics and charts above, it is evident that Kernel PCA outperforms all other models on the testing set, with an overall accuracy of 81.25%, with all other models having accuracy below 80%.\n\nThe good performance exhibited by Kernel PCA over PCA, shows that there were some non-linear relationships within the predictors.\n\n\n# Conclusion\n\nThis study compares models for high dimensional data both in the regression and classification setting. The results show that, for regression: The elastic-net regression model, and Kernel-PCA outperform the rest in terms of Mean Squared Error. For the classification models fitted, the Kernel-PCA and PCA outperform the rest of the models. The consistency of the Kernel PCA in both settings shows that the dataset contained non-linear dependencies in the predictor space - which Kernel-PCA is good at uncovering.\n\nFor both settings, the dimensionality reduction models used including: PCA, k-PCA, and ICA, performed well in reducing the multi-collinearity inherent in the original dataset,and all the dimensionality reduction models show optimal performance with relatively few components used in the model - which helps in pointing out how important the dimensionality reduction models are at combating multi-collinearity in the data.\n\nIn both settings, the hyper-parameters for the final models fitted, such as: $\\alpha, \\lambda$ for the ridge, LASSO and Elastic-Net models, and $p$, the number of components to use for the dimensionality reduction models, were obtained through cross-validation on the training set. Since most models maintained consistency in both training and testing performance, then it shows that cross-validation is useful in determining good hyper-parameter estimates, for model fitting.\n\n# Recommendations\n\nThis article only focuses on a single dataset from Financial domain, where we are interested in predicting the returns, or direction a portfolio of assets would generate at a future time, using historical data of technical, fundamental, and statistical metrics.\n\nFuture research could look into utilizing these models for high-dimensional data from other domains such as health-care, marketing, etc.\n\nFuture research could look into other dimensionality reduction models not utilized in this article, such as Non-Negative Matrix Factorization.^[This research did not cover NNMF, due to computational constraints]\n\nFuture research could look into the importance of these dimensionality reduction models, in the context of clustering, and other Machine Learning models not utilized in this study.\n\n# References\n\nBishop, C. (2011). Pattern Recognition and Machine Learning. Springer.\n\nG. James et al. (2013). An Introduction to Statistical Learning: with Applications in R. Springer Texts in Statistics.\n\nHyvärinen, A., & Oja, E. (2000). Independent component analysis: Algorithms and applications. Neural Networks, 13(4-5), 411-430.\n\nKuhn, M., & Johnson, K. (2013). Applied Predictive Modeling. Springer.\n\nMacKay, D. (2003). Information Theory, Inference and Learning Algorithms. Cambridge University Press.\n\nWickham, H., & Grolemund, G. (2016). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc.\n\n---\n\nAbdi, H., & Williams, L. (2010). Principal component analysis. Wiley Interdisciplinary Reviews: Computational Statistics, 2(4), 433-459.\n\nAltman, D., & Bland, J. (1994). Diagnostic tests 3: Receiver operating characteristic plots. BMJ: British Medical Journal, 309(6948), 188.\n\nBarker, M., & Rayens, W. (2003). Partial least squares for discrimination. Journal of Chemometrics, 17(3), 166-173.\n\nCaputo, B., Sim, K., Furesjo, F., & Smola, A. (2002). Appearance-based object recognition using SVMs: Which kernel should I use? In Proceedings of NIPS Workshop on Statistical Methods for Computational Experiments in Visual Processing and Computer Vision, volume 2002.\n\nFriedman, J., Tibshirani, R., & Hastie, T. (2010). Regularization paths for generalized linear models via coordinate descent. Journal of Statistical Software, 33(1), 1-22. doi:10.18637/jss.v033.i01 https://doi.org/10.18637/jss.v033.i01.\n\nKuhn, M. (2008). Building predictive models in R using the caret package. Journal of Statistical Software, 28(5), 1-26. doi:10.18637/jss.v028.i05 https://doi.org/10.18637/jss.v028.i05.\n\nTay, J. K., Narasimhan, B., & Hastie, T. (2023). Elastic net regularization paths for all generalized linear models. Journal of Statistical Software, 106(1), 1-31. doi:10.18637/jss.v106.i01 https://doi.org/10.18637/jss.v106.i01.\n\n---\n\nKaratzoglou, A., Smola, A., & Hornik, K. (2023). kernlab: Kernel-Based Machine Learning Lab. R package version 0.9-32, https://CRAN.R-project.org/package=kernlab.\n\nKaratzoglou, A., Smola, A., Hornik, K., & Zeileis, A. (2004). kernlab - An S4 package for kernel methods in R. Journal of Statistical Software, 11(9), 1-20. doi:10.18637/jss.v011.i09 https://doi.org/10.18637/jss.v011.i09.\n\nLiland, K., Mevik, B., & Wehrens, R. (2023). pls: Partial Least Squares and Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls.\n\nKuhn, M. (2008). The caret package. Journal of Statistical Software, 28(5), 1-26. doi:10.18637/jss.v028.i05 https://doi.org/10.18637/jss.v028.i05.\n\nKuhn, M., Wickham, H., & Hvitfeldt, E. (2024). recipes: Preprocessing and Feature Engineering Steps for Modeling. R package version 1.0.10, https://CRAN.R-project.org/package=recipes.\n\nMarchini, J. L., Heaton, C., & Ripley, B. D. (2023). fastICA: FastICA Algorithms to Perform ICA and Projection Pursuit. R package version 1.2-4, https://CRAN.R-project.org/package=fastICA.\n\nPeterson, B. G., & Carl, P. (2020). PerformanceAnalytics: Econometric Tools for Performance and Risk Analysis. R package version 2.0.4, https://CRAN.R-project.org/package=PerformanceAnalytics.\n\nR Core Team (2023). R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria. https://www.R-project.org/.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"reference-location":"margin","include-before-body":{"text":"<script defer src=\"https://cloud.umami.is/script.js\" data-website-id=\"e2626c70-2118-4fa1-bf3c-49552f9b4ccf\"></script>\n"},"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Learning representations in high-dimensional data","subtitle":"Regression and Classification","author":"Stanley Sayianka","citation-location":"margin","date":"2022-11-12","categories":["stats","machine-learning"],"image":"high-dim.jpg","grid":{"margin-width":"400px"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}